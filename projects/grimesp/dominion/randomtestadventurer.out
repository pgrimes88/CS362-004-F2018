Random Test Adventurer.c
Test #1 Pass count 50000/50000  (Supply Count Unchanged)
Test #2 Pass count 50000/50000  (other players unchanged (handcount, deckcount, actions and whoseturn))
Test #3 Pass count 50000/50000  (handcount was changed of current player + 2 cards)
Test #4 Pass count 22259/50000  (deckcount was changed of current player - 2 cards)
Test #5 Pass count 37536/50000  (more copper in hand after adventurer)
Test #6 Pass count 37539/50000  (more silver in hand after adventurer)
Test #7 Pass count 0/50000  (more gold in hand after adventurer)
File 'dominion.c'
Lines executed:77.84% of 573
Branches executed:82.94% of 422
Taken at least once:68.48% of 422
Calls executed:68.75% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 752309 returned 100% blocks executed 100%
   752309:    8:int compare(const void* a, const void* b) {
   752309:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 18 (fallthrough)
branch  1 taken 752291
       18:   10:    return 1;
   752291:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 200601 (fallthrough)
branch  1 taken 551690
   200601:   12:    return -1;
   551690:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 1 returned 100% blocks executed 100%
        1:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        1:   23:  int* k = malloc(10 * sizeof(int));
        1:   24:  k[0] = k1;
        1:   25:  k[1] = k2;
        1:   26:  k[2] = k3;
        1:   27:  k[3] = k4;
        1:   28:  k[4] = k5;
        1:   29:  k[5] = k6;
        1:   30:  k[6] = k7;
        1:   31:  k[7] = k8;
        1:   32:  k[8] = k9;
        1:   33:  k[9] = k10;
        1:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 50000 returned 100% blocks executed 89%
    50000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    50000:   44:  SelectStream(1);
call    0 returned 50000
    50000:   45:  PutSeed((long)randomSeed);
call    0 returned 50000
        -:   46:  
        -:   47:  //check number of players
    50000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 50000 (fallthrough)
branch  1 taken 0
branch  2 taken 24925 (fallthrough)
branch  3 taken 25075
        -:   49:    {
    24925:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    25075:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   275825:   57:  for (i = 0; i < 10; i++)
branch  0 taken 250750
branch  1 taken 25075 (fallthrough)
        -:   58:    {
  2758250:   59:      for (j = 0; j < 10; j++)
branch  0 taken 2507500
branch  1 taken 250750 (fallthrough)
        -:   60:        {
  2507500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 2256750 (fallthrough)
branch  1 taken 250750
branch  2 taken 0 (fallthrough)
branch  3 taken 2256750
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    25075:   73:  if (numPlayers == 2)
branch  0 taken 25075 (fallthrough)
branch  1 taken 0
        -:   74:    {
    25075:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    25075:   87:  if (numPlayers == 2)
branch  0 taken 25075 (fallthrough)
branch  1 taken 0
        -:   88:    {
    25075:   89:      state->supplyCount[estate] = 8;
    25075:   90:      state->supplyCount[duchy] = 8;
    25075:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    25075:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    25075:  102:  state->supplyCount[silver] = 40;
    25075:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   526575:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 501500
branch  1 taken 25075 (fallthrough)
        -:  107:    {
  4137375:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 3886625
branch  1 taken 250750 (fallthrough)
        -:  109:	{
  3886625:  110:	  if (kingdomCards[j] == i)
branch  0 taken 250750 (fallthrough)
branch  1 taken 3635875
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   250750:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 250750 (fallthrough)
branch  1 taken 0
branch  2 taken 25075 (fallthrough)
branch  3 taken 225675
        -:  114:		{
    50150:  115:		  if (numPlayers == 2){ 
branch  0 taken 25075 (fallthrough)
branch  1 taken 0
    25075:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   225675:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   250750:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  3635875:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    75225:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 50150
branch  1 taken 25075 (fallthrough)
        -:  139:    {
    50150:  140:      state->deckCount[i] = 0;
   200600:  141:      for (j = 0; j < 3; j++)
branch  0 taken 150450
branch  1 taken 50150 (fallthrough)
        -:  142:	{
   150450:  143:	  state->deck[i][j] = estate;
   150450:  144:	  state->deckCount[i]++;
        -:  145:	}
   401200:  146:      for (j = 3; j < 10; j++)
branch  0 taken 351050
branch  1 taken 50150 (fallthrough)
        -:  147:	{
   351050:  148:	  state->deck[i][j] = copper;
   351050:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    75225:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 50150
branch  1 taken 25075 (fallthrough)
        -:  155:    {
    50150:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 50150
branch  1 taken 0 (fallthrough)
branch  2 taken 50150
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    75225:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 50150
branch  1 taken 25075 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    50150:  166:      state->handCount[i] = 0;
    50150:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   702100:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 677025
branch  1 taken 25075 (fallthrough)
        -:  177:    {
   677025:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    25075:  182:  state->outpostPlayed = 0;
    25075:  183:  state->phase = 0;
    25075:  184:  state->numActions = 1;
    25075:  185:  state->numBuys = 1;
    25075:  186:  state->playedCardCount = 0;
    25075:  187:  state->whoseTurn = 0;
    25075:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   150450:  192:  for (it = 0; it < 5; it++){
branch  0 taken 125375
branch  1 taken 25075 (fallthrough)
   125375:  193:    drawCard(state->whoseTurn, state);
call    0 returned 125375
        -:  194:  }
        -:  195:
    25075:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 25075
        -:  197:
    25075:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 50172 returned 100% blocks executed 100%
    50172:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    50172:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    50172:  209:  if (state->deckCount[player] < 1)
branch  0 taken 12 (fallthrough)
branch  1 taken 50160
       12:  210:    return -1;
    50160:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 50160
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   601866:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 501546
branch  1 taken 50160 (fallthrough)
   501546:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 501546
   501546:  216:    newDeck[newDeckPos] = state->deck[player][card];
   501546:  217:    newDeckPos++;
  1630129:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 1128583
branch  1 taken 501546 (fallthrough)
  1128583:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   501546:  221:    state->deckCount[player]--;
        -:  222:  }
   551706:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 501546
branch  1 taken 50160 (fallthrough)
   501546:  224:    state->deck[player][i] = newDeck[i];
   501546:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    50160:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 50000 returned 100% blocks executed 47%
    50000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    50000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    50000:  237:  if (state->phase != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 50000
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    50000:  243:  if ( state->numActions < 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 50000
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    50000:  249:  card = handCard(handPos, state);
call    0 returned 50000
        -:  250:	
        -:  251:  //check if selected card is an action
    50000:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 0 (fallthrough)
branch  1 taken 50000
branch  2 never executed
branch  3 never executed
        -:  253:    {
    50000:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 50000 returned 100% blocks executed 100%
    50000:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    50000:  280:  who = state->whoseTurn;
        -:  281:
    50000:  282:  if (state->numBuys < 1){
branch  0 taken 1 (fallthrough)
branch  1 taken 49999
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
    49999:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 49999
branch  1 taken 18558 (fallthrough)
branch  2 taken 31441
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    18558:  289:    return -1;
    31441:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 31441
branch  1 taken 13035 (fallthrough)
branch  2 taken 18406
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    13035:  293:    return -1;
        -:  294:  } else {
    18406:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    18406:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 18406
        -:  298:  
    18406:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 18406
    18406:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    18406:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 50000 returned 100% blocks executed 100%
    50000:  311:int numHandCards(struct gameState *state) {
    50000:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 50000
        -:  313:}
        -:  314:
function handCard called 50000 returned 100% blocks executed 100%
    50000:  315:int handCard(int handPos, struct gameState *state) {
    50000:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 50000
    50000:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 68463 returned 100% blocks executed 100%
    68463:  320:int supplyCount(int card, struct gameState *state) {
    68463:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 14836 returned 100% blocks executed 94%
    14836:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    14836:  326:  int count = 0;
        -:  327:
   769346:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 754510
branch  1 taken 14836 (fallthrough)
        -:  329:    {
   754510:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 6951 (fallthrough)
branch  1 taken 747559
        -:  331:    }
        -:  332:
    53298:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 38462
branch  1 taken 14836 (fallthrough)
        -:  334:    {
    38462:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0 (fallthrough)
branch  1 taken 38462
        -:  336:    }
        -:  337:
   134118:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 119282
branch  1 taken 14836 (fallthrough)
        -:  339:    {
   119282:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 1404 (fallthrough)
branch  1 taken 117878
        -:  341:    }
        -:  342:
    14836:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 3000349 returned 100% blocks executed 100%
  3000349:  346:int whoseTurn(struct gameState *state) {
  3000349:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 50000 returned 100% blocks executed 100%
    50000:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    50000:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 50000
        -:  354:  
        -:  355:  //Discard hand
   366959:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 316959
branch  1 taken 50000 (fallthrough)
   316959:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
   316959:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    50000:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    50000:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 35071 (fallthrough)
branch  1 taken 14929
    35071:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    14929:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    50000:  370:  state->outpostPlayed = 0;
    50000:  371:  state->phase = 0;
    50000:  372:  state->numActions = 1;
    50000:  373:  state->coins = 0;
    50000:  374:  state->numBuys = 1;
    50000:  375:  state->playedCardCount = 0;
    50000:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
   300000:  380:  for (k = 0; k < 5; k++){
branch  0 taken 250000
branch  1 taken 50000 (fallthrough)
   250000:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 250000
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    50000:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 50000
        -:  386:
    50000:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 50000 returned 100% blocks executed 73%
    50000:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    50000:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 50000
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    50000:  401:  j = 0;
  1300000:  402:  for (i = 0; i < 25; i++)
branch  0 taken 1250000
branch  1 taken 50000 (fallthrough)
        -:  403:    {
  1250000:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1250000
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    50000:  409:  if ( j >= 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 50000
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    50000:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 100000 returned 100% blocks executed 88%
   100000:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
   100000:  420:  int score = 0;
        -:  421:  //score from hand
   434841:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 334841
branch  1 taken 100000 (fallthrough)
        -:  423:    {
   334841:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 334841
   334841:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 67788 (fallthrough)
branch  1 taken 267053
   334841:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 334841
   334841:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 334841
   334841:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 334841
   334841:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 334841
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
   489413:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 389413
branch  1 taken 100000 (fallthrough)
        -:  434:    {
   389413:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 5715 (fallthrough)
branch  1 taken 383698
   389413:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 54271 (fallthrough)
branch  1 taken 335142
   389413:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 3996 (fallthrough)
branch  1 taken 385417
   389413:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 3776 (fallthrough)
branch  1 taken 385637
   389413:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 3244 (fallthrough)
branch  1 taken 386169
   389413:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 4775 (fallthrough)
branch  1 taken 384638
call    2 returned 4775
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
   489413:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 389413
branch  1 taken 100000 (fallthrough)
        -:  445:    {
   389413:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 9949 (fallthrough)
branch  1 taken 379464
   389413:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 40288 (fallthrough)
branch  1 taken 349125
   389413:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 10134 (fallthrough)
branch  1 taken 379279
   389413:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 10149 (fallthrough)
branch  1 taken 379264
   389413:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 10330 (fallthrough)
branch  1 taken 379083
   389413:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 10061 (fallthrough)
branch  1 taken 379352
call    2 returned 10061
        -:  452:    }
        -:  453:
   100000:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 50000 returned 100% blocks executed 100%
    50000:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
   250000:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
   200000:  467:      if (i >= state->numPlayers)
branch  0 taken 100000 (fallthrough)
branch  1 taken 100000
        -:  468:	{
   100000:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
   100000:  473:	  players[i] = scoreFor (i, state);
call    0 returned 100000
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    50000:  478:  j = 0;
   250000:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  480:    {
   200000:  481:      if (players[i] > players[j])
branch  0 taken 16518 (fallthrough)
branch  1 taken 183482
        -:  482:	{
    16518:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    50000:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    50000:  489:  currentPlayer = whoseTurn(state);
call    0 returned 50000
   250000:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  491:    {
   200000:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 55718 (fallthrough)
branch  1 taken 144282
branch  2 taken 14253 (fallthrough)
branch  3 taken 41465
        -:  493:	{
    14253:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    50000:  499:  j = 0;
   250000:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  501:    {
   200000:  502:      if ( players[i] > players[j] )
branch  0 taken 19238 (fallthrough)
branch  1 taken 180762
        -:  503:	{
    19238:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    50000:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
   250000:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  511:    {
   200000:  512:      if ( players[i] == highScore )
branch  0 taken 52998 (fallthrough)
branch  1 taken 147002
        -:  513:	{
    52998:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
   147002:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    50000:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 600192 returned 100% blocks executed 100%
   600192:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   600192:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 22 (fallthrough)
branch  1 taken 600170
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
       68:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 46
branch  1 taken 22 (fallthrough)
       46:  533:      state->deck[player][i] = state->discard[player][i];
       46:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
       22:  537:    state->deckCount[player] = state->discardCount[player];
       22:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
       22:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 22
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
       22:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
       22:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
       22:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
       22:  558:    if (deckCounter == 0)
branch  0 taken 12 (fallthrough)
branch  1 taken 10
       12:  559:      return -1;
        -:  560:      
       10:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       10:  562:    state->deckCount[player]--;
       10:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
   600170:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
   600170:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
   600170:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   600170:  575:    state->deckCount[player]--;
   600170:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
   600180:  579:  return 0;
        -:  580:}
        -:  581:
function getCost called 49896 returned 100% blocks executed 67%
    49896:  582:int getCost(int cardNumber)
        -:  583:{
    49896:  584:  switch( cardNumber ) 
branch  0 taken 3811
branch  1 taken 3707
branch  2 taken 2374
branch  3 taken 2136
branch  4 taken 3751
branch  5 taken 3531
branch  6 taken 2258
branch  7 taken 2205
branch  8 taken 0
branch  9 taken 0
branch 10 taken 2998
branch 11 taken 2290
branch 12 taken 0
branch 13 taken 2989
branch 14 taken 3605
branch 15 taken 0
branch 16 taken 0
branch 17 taken 2405
branch 18 taken 0
branch 19 taken 2257
branch 20 taken 0
branch 21 taken 2999
branch 22 taken 3634
branch 23 taken 0
branch 24 taken 0
branch 25 taken 2945
branch 26 taken 0
branch 27 taken 1
        -:  585:    {
        -:  586:    case curse:
     3811:  587:      return 0;
        -:  588:    case estate:
     3707:  589:      return 2;
        -:  590:    case duchy:
     2374:  591:      return 5;
        -:  592:    case province:
     2136:  593:      return 8;
        -:  594:    case copper:
     3751:  595:      return 0;
        -:  596:    case silver:
     3531:  597:      return 3;
        -:  598:    case gold:
     2258:  599:      return 6;
        -:  600:    case adventurer:
     2205:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
     2998:  607:      return 4;
        -:  608:    case mine:
     2290:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
     2989:  613:      return 4;
        -:  614:    case village:
     3605:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
     2405:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
     2257:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
     2999:  629:      return 4;
        -:  630:    case embargo: 
     3634:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
     2945:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
        1:  642:  return -1;
        -:  643:}
        -:  644:
function cardEffect called 50300 returned 100% blocks executed 51%
    50300:  645:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:{
        -:  647:  int i;
        -:  648:  int j;
        -:  649:  int k;
        -:  650:  int x;
        -:  651:  int index;
    50300:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 50300
    50300:  653:  int nextPlayer = currentPlayer + 1;
    50300:  654:  int tributeRevealedCards[2] = {-1, -1};
        -:  655:  int temphand[MAX_HAND];// moved above the if statement
    50300:  656:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 30216 (fallthrough)
branch  1 taken 20084
    30216:  657:    nextPlayer = 0;
        -:  658:  }
        -:  659:  
        -:  660:	
        -:  661:  //uses switch to select card and perform actions
    50300:  662:  switch( card ) 
branch  0 taken 50019
branch  1 taken 8
branch  2 taken 6
branch  3 taken 10
branch  4 taken 6
branch  5 taken 5
branch  6 taken 15
branch  7 taken 7
branch  8 taken 16
branch  9 taken 13
branch 10 taken 16
branch 11 taken 8
branch 12 taken 11
branch 13 taken 10
branch 14 taken 14
branch 15 taken 14
branch 16 taken 12
branch 17 taken 12
branch 18 taken 10
branch 19 taken 88
        -:  663:    {
        -:  664:    case adventurer:
    50019:  665:      return adventurerFunction(state);
call    0 returned 50019
        -:  666:			
        -:  667:    case council_room:
        8:  668:      return council_roomFunction(handPos, state);
call    0 returned 8
        -:  669:    
        -:  670:    case smithy:
        6:  671:      return smithyFunction(handPos, state);
call    0 returned 6
        -:  672:		
        -:  673:		case great_hall:
       10:  674:		  return great_hallFunction(handPos, state);
call    0 returned 10
        -:  675:		
        -:  676:		case outpost:
        6:  677:		  return outpostFunction(handPos, state);
call    0 returned 6
        -:  678:		  
        -:  679:    case feast:
        -:  680:      //gain card with cost up to 5
        -:  681:      //Backup hand
       39:  682:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 34
branch  1 taken 5 (fallthrough)
       34:  683:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       34:  684:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  685:      }
        -:  686:      //Backup hand
        -:  687:
        -:  688:      //Update Coins for Buy
        5:  689:      updateCoins(currentPlayer, state, 5);
call    0 returned 5
        5:  690:      x = 1;//Condition to loop on
       15:  691:      while( x == 1) {//Buy one card
branch  0 taken 5
branch  1 taken 5 (fallthrough)
        5:  692:	if (supplyCount(choice1, state) <= 0){
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0
        -:  693:	  if (DEBUG)
        -:  694:	    printf("None of that card left, sorry!\n");
        -:  695:
        -:  696:	  if (DEBUG){
        -:  697:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  698:	  }
        -:  699:	}
        5:  700:	else if (state->coins < getCost(choice1)){
call    0 returned 5
branch  1 taken 0 (fallthrough)
branch  2 taken 5
    #####:  701:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  702:
        -:  703:	  if (DEBUG){
        -:  704:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  705:	  }
        -:  706:	}
        -:  707:	else{
        -:  708:
        -:  709:	  if (DEBUG){
        -:  710:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  711:	  }
        -:  712:
        5:  713:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 5
        5:  714:	  x = 0;//No more buying cards
        -:  715:
        -:  716:	  if (DEBUG){
        -:  717:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  718:	  }
        -:  719:
        -:  720:	}
        -:  721:      }     
        -:  722:
        -:  723:      //Reset Hand
       39:  724:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 34
branch  1 taken 5 (fallthrough)
       34:  725:	state->hand[currentPlayer][i] = temphand[i];
       34:  726:	temphand[i] = -1;
        -:  727:      }
        -:  728:      //Reset Hand
        -:  729:      			
        5:  730:      return 0;
        -:  731:			
        -:  732:    case gardens:
       15:  733:      return -1;
        -:  734:			
        -:  735:    case mine:
        7:  736:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
        7:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 6 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 6
        -:  739:	{
        1:  740:	  return -1;
        -:  741:	}
        -:  742:		
        6:  743:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 6 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 6
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:
        6:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0
        -:  749:	{
        6:  750:	  return -1;
        -:  751:	}
        -:  752:
    #####:  753:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  754:
        -:  755:      //discard card from hand
    #####:  756:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  757:
        -:  758:      //discard trashed card
    #####:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  760:	{
    #####:  761:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  762:	    {
    #####:  763:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
    #####:  768:      return 0;
        -:  769:			
        -:  770:    case remodel:
       16:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
       16:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 16
call    1 returned 16
branch  2 taken 16 (fallthrough)
branch  3 taken 0
        -:  774:	{
       16:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:
        -:  793:
    #####:  794:      return 0;
        -:  795:      
        -:  796:		
        -:  797:    case village:
        -:  798:      //+1 Card
       13:  799:      drawCard(currentPlayer, state);
call    0 returned 13
        -:  800:			
        -:  801:      //+2 Actions
       13:  802:      state->numActions = state->numActions + 2;
        -:  803:			
        -:  804:      //discard played card from hand
       13:  805:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 13
       13:  806:      return 0;
        -:  807:		
        -:  808:    case baron:
       16:  809:      state->numBuys++;//Increase buys by 1!
       16:  810:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0 (fallthrough)
branch  1 taken 16
    #####:  811:	int p = 0;//Iterator for hand!
    #####:  812:	int card_not_discarded = 1;//Flag for discard set!
    #####:  813:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  814:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  815:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  816:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  817:	    state->discardCount[currentPlayer]++;
    #####:  818:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  819:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  820:	    }
    #####:  821:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  822:	    state->handCount[currentPlayer]--;
    #####:  823:	    card_not_discarded = 0;//Exit the loop
        -:  824:	  }
    #####:  825:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  826:	    if(DEBUG) {
        -:  827:	      printf("No estate cards in your hand, invalid choice\n");
        -:  828:	      printf("Must gain an estate if there are any\n");
        -:  829:	    }
    #####:  830:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  831:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  832:	      state->supplyCount[estate]--;//Decrement estates
    #####:  833:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  834:		isGameOver(state);
call    0 never executed
        -:  835:	      }
        -:  836:	    }
    #####:  837:	    card_not_discarded = 0;//Exit the loop
        -:  838:	  }
        -:  839:			    
        -:  840:	  else{
    #####:  841:	    p++;//Next card
        -:  842:	  }
        -:  843:	}
        -:  844:      }
        -:  845:			    
        -:  846:      else{
       16:  847:	if (supplyCount(estate, state) > 0){
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0
       16:  848:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 16
       16:  849:	  state->supplyCount[estate]--;//Decrement Estates
       16:  850:	  if (supplyCount(estate, state) == 0){
call    0 returned 16
branch  1 taken 0 (fallthrough)
branch  2 taken 16
    #####:  851:	    isGameOver(state);
call    0 never executed
        -:  852:	  }
        -:  853:	}
        -:  854:      }
        -:  855:	    
        -:  856:      
       16:  857:      return 0;
        -:  858:		
        -:  859:		
        -:  860:    case minion:
        -:  861:      //+1 action
        8:  862:      state->numActions++;
        -:  863:			
        -:  864:      //discard card from hand
        8:  865:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 8
        -:  866:			
        8:  867:      if (choice1)		//+2 coins
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -:  868:	{
    #####:  869:	  state->coins = state->coins + 2;
        -:  870:	}
        -:  871:			
        8:  872:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        -:  873:	{
        -:  874:	  //discard hand
    #####:  875:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  876:	    {
    #####:  877:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:	    }
        -:  879:				
        -:  880:	  //draw 4
    #####:  881:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  884:	    }
        -:  885:				
        -:  886:	  //other players discard hand and redraw if hand size > 4
    #####:  887:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  890:		{
    #####:  891:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  892:		    {
        -:  893:		      //discard hand
    #####:  894:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  895:			{
    #####:  896:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  897:			}
        -:  898:							
        -:  899:		      //draw 4
    #####:  900:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  901:			{
    #####:  902:			  drawCard(i, state);
call    0 never executed
        -:  903:			}
        -:  904:		    }
        -:  905:		}
        -:  906:	    }
        -:  907:				
        -:  908:	}
        8:  909:      return 0;
        -:  910:		
        -:  911:    case steward:
       11:  912:      if (choice1 == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 11
        -:  913:	{
        -:  914:	  //+2 cards
    #####:  915:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  916:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  917:	}
       11:  918:      else if (choice1 == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 11
        -:  919:	{
        -:  920:	  //+2 coins
    #####:  921:	  state->coins = state->coins + 2;
        -:  922:	}
        -:  923:      else
        -:  924:	{
        -:  925:	  //trash 2 cards in hand
       11:  926:	  discardCard(choice2, currentPlayer, state, 1);
call    0 returned 11
       11:  927:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 11
        -:  928:	}
        -:  929:			
        -:  930:      //discard card from hand
       11:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 11
       11:  932:      return 0;
        -:  933:		
        -:  934:    case tribute:
       10:  935:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####:  936:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  937:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  938:	  state->deckCount[nextPlayer]--;
        -:  939:	}
    #####:  940:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  942:	  state->discardCount[nextPlayer]--;
        -:  943:	}
        -:  944:	else{
        -:  945:	  //No Card to Reveal
        -:  946:	  if (DEBUG){
        -:  947:	    printf("No cards to reveal\n");
        -:  948:	  }
        -:  949:	}
        -:  950:      }
        -:  951:	    
        -:  952:      else{
       10:  953:	if (state->deckCount[nextPlayer] == 0){
branch  0 taken 0 (fallthrough)
branch  1 taken 10
    #####:  954:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  955:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  956:	    state->deckCount[nextPlayer]++;
    #####:  957:	    state->discard[nextPlayer][i] = -1;
    #####:  958:	    state->discardCount[nextPlayer]--;
        -:  959:	  }
        -:  960:			    
    #####:  961:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  962:	} 
       10:  963:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       10:  964:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       10:  965:	state->deckCount[nextPlayer]--;
       10:  966:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       10:  967:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       10:  968:	state->deckCount[nextPlayer]--;
        -:  969:      }    
        -:  970:		       
       10:  971:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 taken 4 (fallthrough)
branch  1 taken 6
        4:  972:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        4:  973:	state->playedCardCount++;
        4:  974:	tributeRevealedCards[1] = -1;
        -:  975:      }
        -:  976:
       40:  977:      for (i = 0; i <= 2; i ++){
branch  0 taken 30
branch  1 taken 10 (fallthrough)
       30:  978:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 taken 21 (fallthrough)
branch  1 taken 9
branch  2 taken 18 (fallthrough)
branch  3 taken 3
branch  4 taken 1 (fallthrough)
branch  5 taken 17
       13:  979:	  state->coins += 2;
        -:  980:	}
        -:  981:		    
       17:  982:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 taken 14 (fallthrough)
branch  1 taken 3
branch  2 taken 14 (fallthrough)
branch  3 taken 0
branch  4 taken 14 (fallthrough)
branch  5 taken 0
branch  6 taken 14 (fallthrough)
branch  7 taken 0
branch  8 taken 0 (fallthrough)
branch  9 taken 14
        3:  983:	  drawCard(currentPlayer, state);
call    0 returned 3
        3:  984:	  drawCard(currentPlayer, state);
call    0 returned 3
        -:  985:	}
        -:  986:	else{//Action Card
       14:  987:	  state->numActions = state->numActions + 2;
        -:  988:	}
        -:  989:      }
        -:  990:	    
       10:  991:      return 0;
        -:  992:		
        -:  993:    case ambassador:
       14:  994:      j = 0;		//used to check if player has enough cards to discard
        -:  995:
       14:  996:      if (choice2 > 2 || choice2 < 0)
branch  0 taken 14 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 14
        -:  997:	{
    #####:  998:	  return -1;				
        -:  999:	}
        -: 1000:
       14: 1001:      if (choice1 == handPos)
branch  0 taken 14 (fallthrough)
branch  1 taken 0
        -: 1002:	{
       14: 1003:	  return -1;
        -: 1004:	}
        -: 1005:
    #####: 1006:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
    #####: 1008:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1009:	    {
    #####: 1010:	      j++;
        -: 1011:	    }
        -: 1012:	}
    #####: 1013:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1014:	{
    #####: 1015:	  return -1;				
        -: 1016:	}
        -: 1017:
        -: 1018:      if (DEBUG) 
        -: 1019:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1020:
        -: 1021:      //increase supply count for choosen card by amount being discarded
    #####: 1022:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1023:			
        -: 1024:      //each other player gains a copy of revealed card
    #####: 1025:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1026:	{
    #####: 1027:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1028:	    {
    #####: 1029:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1030:	    }
        -: 1031:	}
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1035:
        -: 1036:      //trash copies of cards returned to supply
    #####: 1037:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1038:	{
    #####: 1039:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1040:	    {
    #####: 1041:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1042:		{
    #####: 1043:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1044:		  break;
        -: 1045:		}
        -: 1046:	    }
        -: 1047:	}			
        -: 1048:
    #####: 1049:      return 0;
        -: 1050:		
        -: 1051:    case cutpurse:
        -: 1052:
       14: 1053:      updateCoins(currentPlayer, state, 2);
call    0 returned 14
       42: 1054:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 28
branch  1 taken 14 (fallthrough)
        -: 1055:	{
       28: 1056:	  if (i != currentPlayer)
branch  0 taken 17 (fallthrough)
branch  1 taken 11
        -: 1057:	    {
       18: 1058:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 taken 7
branch  1 taken 11 (fallthrough)
        -: 1059:		{
        7: 1060:		  if (state->hand[i][j] == copper)
branch  0 taken 6 (fallthrough)
branch  1 taken 1
        -: 1061:		    {
        6: 1062:		      discardCard(j, i, state, 0);
call    0 returned 6
        6: 1063:		      break;
        -: 1064:		    }
        1: 1065:		  if (j == state->handCount[i])
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1066:		    {
    #####: 1067:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1068:			{
        -: 1069:			  if (DEBUG)
        -: 1070:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1071:			}	
    #####: 1072:		      break;
        -: 1073:		    }		
        -: 1074:		}
        -: 1075:					
        -: 1076:	    }
        -: 1077:				
        -: 1078:	}				
        -: 1079:
        -: 1080:      //discard played card from hand
       14: 1081:      discardCard(handPos, currentPlayer, state, 0);			
call    0 returned 14
        -: 1082:
       14: 1083:      return 0;
        -: 1084:
        -: 1085:		
        -: 1086:    case embargo: 
        -: 1087:      //+2 Coins
       12: 1088:      state->coins = state->coins + 2;
        -: 1089:			
        -: 1090:      //see if selected pile is in play
       12: 1091:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 12
        -: 1092:	{
    #####: 1093:	  return -1;
        -: 1094:	}
        -: 1095:			
        -: 1096:      //add embargo token to selected supply pile
       12: 1097:      state->embargoTokens[choice1]++;
        -: 1098:			
        -: 1099:      //trash card
       12: 1100:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 12
       12: 1101:      return 0;
        -: 1102:		
        -: 1103:    case sea_hag:
       36: 1104:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 24
branch  1 taken 12 (fallthrough)
       24: 1105:	if (i != currentPlayer){
branch  0 taken 14 (fallthrough)
branch  1 taken 10
       14: 1106:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
       14: 1107:	  state->discardCount[i]++;
       14: 1108:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1109:	}
        -: 1110:      }
       12: 1111:      return 0;
        -: 1112:		
        -: 1113:    case treasure_map:
        -: 1114:      //search hand for another treasure_map
       10: 1115:      index = -1;
       64: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 54
branch  1 taken 10 (fallthrough)
        -: 1117:	{
       54: 1118:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 0 (fallthrough)
branch  1 taken 54
branch  2 never executed
branch  3 never executed
        -: 1119:	    {
    #####: 1120:	      index = i;
    #####: 1121:	      break;
        -: 1122:	    }
        -: 1123:	}
       10: 1124:      if (index > -1)
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -: 1125:	{
        -: 1126:	  //trash both treasure cards
    #####: 1127:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1128:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1129:
        -: 1130:	  //gain 4 Gold cards
    #####: 1131:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1132:	    {
    #####: 1133:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1134:	    }
        -: 1135:				
        -: 1136:	  //return success
    #####: 1137:	  return 1;
        -: 1138:	}
        -: 1139:			
        -: 1140:      //no second treasure_map found in hand
       10: 1141:      return -1;
        -: 1142:    }
        -: 1143:	
       88: 1144:  return -1;
        -: 1145:}
        -: 1146:
function discardCard called 116 returned 100% blocks executed 89%
      116: 1147:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1148:{
        -: 1149:	
        -: 1150:  //if card is not trashed, added to Played pile 
      116: 1151:  if (trashFlag < 1)
branch  0 taken 82 (fallthrough)
branch  1 taken 34
        -: 1152:    {
        -: 1153:      //add card to played pile
       82: 1154:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       82: 1155:      state->playedCardCount++;
        -: 1156:    }
        -: 1157:	
        -: 1158:  //set played card to -1
      116: 1159:  state->hand[currentPlayer][handPos] = -1;
        -: 1160:	
        -: 1161:  //remove card from player's hand
      116: 1162:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 2 (fallthrough)
branch  1 taken 114
        -: 1163:    {
        -: 1164:      //reduce number of cards in hand
        2: 1165:      state->handCount[currentPlayer]--;
        -: 1166:    }
      114: 1167:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 114
        -: 1168:    {
        -: 1169:      //reduce number of cards in hand
    #####: 1170:      state->handCount[currentPlayer]--;
        -: 1171:    }
        -: 1172:  else 	
        -: 1173:    {
        -: 1174:      //replace discarded card with last card in hand
      114: 1175:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1176:      //set last card to -1
      114: 1177:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1178:      //reduce number of cards in hand
      114: 1179:      state->handCount[currentPlayer]--;
        -: 1180:    }
        -: 1181:	
      116: 1182:  return 0;
        -: 1183:}
        -: 1184:
function gainCard called 18427 returned 100% blocks executed 70%
    18427: 1185:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1186:{
        -: 1187:  //Note: supplyPos is enum of choosen card
        -: 1188:	
        -: 1189:  //check if supply pile is empty (0) or card is not used in game (-1)
    18427: 1190:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 18427
branch  1 taken 0 (fallthrough)
branch  2 taken 18427
        -: 1191:    {
    #####: 1192:      return -1;
        -: 1193:    }
        -: 1194:	
        -: 1195:  //added card for [whoseTurn] current player:
        -: 1196:  // toFlag = 0 : add to discard
        -: 1197:  // toFlag = 1 : add to deck
        -: 1198:  // toFlag = 2 : add to hand
        -: 1199:
    18427: 1200:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 18427
        -: 1201:    {
    #####: 1202:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1203:      state->deckCount[player]++;
        -: 1204:    }
    18427: 1205:  else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 18427
        -: 1206:    {
    #####: 1207:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1208:      state->handCount[player]++;
        -: 1209:    }
        -: 1210:  else
        -: 1211:    {
    18427: 1212:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    18427: 1213:      state->discardCount[player]++;
        -: 1214:    }
        -: 1215:	
        -: 1216:  //decrease number in supply pile
    18427: 1217:  state->supplyCount[supplyPos]--;
        -: 1218:	 
    18427: 1219:  return 0;
        -: 1220:}
        -: 1221:
function updateCoins called 75094 returned 100% blocks executed 100%
    75094: 1222:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1223:{
        -: 1224:  int i;
        -: 1225:	
        -: 1226:  //reset coin count
    75094: 1227:  state->coins = 0;
        -: 1228:
        -: 1229:  //add coins for each Treasure card in player's hand
   450548: 1230:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 375454
branch  1 taken 75094 (fallthrough)
        -: 1231:    {
   375454: 1232:      if (state->hand[player][i] == copper)
branch  0 taken 244766 (fallthrough)
branch  1 taken 130688
        -: 1233:	{
   244766: 1234:	  state->coins += 1;
        -: 1235:	}
   130688: 1236:      else if (state->hand[player][i] == silver)
branch  0 taken 16428 (fallthrough)
branch  1 taken 114260
        -: 1237:	{
    16428: 1238:	  state->coins += 2;
        -: 1239:	}
   114260: 1240:      else if (state->hand[player][i] == gold)
branch  0 taken 16668 (fallthrough)
branch  1 taken 97592
        -: 1241:	{
    16668: 1242:	  state->coins += 3;
        -: 1243:	}	
        -: 1244:    }	
        -: 1245:
        -: 1246:  //add bonus
    75094: 1247:  state->coins += bonus;
        -: 1248:
    75094: 1249:  return 0;
        -: 1250:}
        -: 1251:
function adventurerFunction called 50019 returned 100% blocks executed 94%
    50019: 1252:int adventurerFunction(struct gameState *state){
    50019: 1253:  int currentPlayer = whoseTurn(state);
call    0 returned 50019
    50019: 1254:  int nextPlayer = currentPlayer + 1;
        -: 1255:  int temphand[MAX_HAND];// moved above the if statement
    50019: 1256:  int drawntreasure=0;
        -: 1257:  int cardDrawn;
    50019: 1258:  int z = 0;// this is the counter for the temp hand
    50019: 1259:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 30052 (fallthrough)
branch  1 taken 19967
    30052: 1260:    nextPlayer = 0;
        -: 1261:  }
   250258: 1262:  while(drawntreasure<2){
branch  0 taken 150220
branch  1 taken 50019 (fallthrough)
   150220: 1263:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0 (fallthrough)
branch  1 taken 150220
    #####: 1264:	  shuffle(currentPlayer, state);
call    0 never executed
        -: 1265:	}
   150220: 1266:	drawCard(currentPlayer, state);
call    0 returned 150220
   150220: 1267:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   150220: 1268:	if (cardDrawn == copper || cardDrawn == silver)
branch  0 taken 100195 (fallthrough)
branch  1 taken 50025
branch  2 taken 50013 (fallthrough)
branch  3 taken 50182
   100038: 1269:	  drawntreasure++;
        -: 1270:	else{
    50182: 1271:	  temphand[z]=cardDrawn;
    50182: 1272:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    50182: 1273:	  z++;
        -: 1274:	}
        -: 1275:      }
   150220: 1276:      while(z-1>=0){
branch  0 taken 50182
branch  1 taken 50019 (fallthrough)
    50182: 1277:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    50182: 1278:	z=z-1;
        -: 1279:      }
    50019: 1280:      return 0;
        -: 1281:}
        -: 1282:
function council_roomFunction called 8 returned 100% blocks executed 100%
        8: 1283:int council_roomFunction(int handPos, struct gameState *state){
        -: 1284:  int i;
        8: 1285:  int currentPlayer = whoseTurn(state);
call    0 returned 8
        8: 1286:  int nextPlayer = currentPlayer + 1;
        8: 1287:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 5 (fallthrough)
branch  1 taken 3
        5: 1288:    nextPlayer = 0;
        -: 1289:  }
        -: 1290:  //+4 Cards
       40: 1291:      for (i = 0; i < 4; i++)
branch  0 taken 32
branch  1 taken 8 (fallthrough)
        -: 1292:	{
       32: 1293:	  drawCard(currentPlayer, state);
call    0 returned 32
        -: 1294:	}
        -: 1295:			
        -: 1296:      //+1 Buy
        8: 1297:      state->numBuys++;
        -: 1298:			
        -: 1299:      //Each other player draws a card
       16: 1300:      for (i = 0; i < state->numPlayers - 1; i++)
branch  0 taken 8
branch  1 taken 8 (fallthrough)
        -: 1301:	{
        8: 1302:	  if ( i != currentPlayer )
branch  0 taken 5 (fallthrough)
branch  1 taken 3
        -: 1303:	    {
        5: 1304:	      drawCard(i, state);
call    0 returned 5
        -: 1305:	    }
        -: 1306:	}
        -: 1307:			
        -: 1308:      //put played card in played card pile
        8: 1309:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 8
        -: 1310:			
        8: 1311:      return 0;
        -: 1312:}
        -: 1313:
function smithyFunction called 6 returned 100% blocks executed 100%
        6: 1314:int smithyFunction(int handPos,struct gameState *state){
        -: 1315:  int i;
        6: 1316:  int currentPlayer = whoseTurn(state);
call    0 returned 6
        6: 1317:  int nextPlayer = currentPlayer + 1;
        -: 1318:
        6: 1319:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4: 1320:    nextPlayer = 0;
        -: 1321:  }
        -: 1322:  //+3 Cards
       18: 1323:      for (i = 0; i < 2; i++)
branch  0 taken 12
branch  1 taken 6 (fallthrough)
        -: 1324:	{
       12: 1325:	  drawCard(currentPlayer, state);
call    0 returned 12
        -: 1326:	}
        -: 1327:			
        -: 1328:      //discard card from hand
        6: 1329:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 6
        6: 1330:      return 0;
        -: 1331:		
        -: 1332:}
        -: 1333:
function great_hallFunction called 10 returned 100% blocks executed 100%
       10: 1334:int great_hallFunction(int handPos, struct gameState *state){
       10: 1335:  int currentPlayer = whoseTurn(state);
call    0 returned 10
       10: 1336:  int nextPlayer = currentPlayer + 1;
       10: 1337:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 7 (fallthrough)
branch  1 taken 3
        7: 1338:    nextPlayer = 0;
        -: 1339:  }
        -: 1340:  //+1 Card
       10: 1341:      drawCard(currentPlayer, state);
call    0 returned 10
        -: 1342:			
        -: 1343:      //+1 Actions
       10: 1344:      state->numActions++;
        -: 1345:      //+1 Buy (bug)
       10: 1346:      state->numBuys++;
        -: 1347:      
        -: 1348:			
        -: 1349:      //discard card from hand
       10: 1350:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 10
       10: 1351:      return 0;
        -: 1352:}
        -: 1353:
function outpostFunction called 6 returned 100% blocks executed 100%
        6: 1354:int outpostFunction(int handPos, struct gameState *state){
        6: 1355:  int currentPlayer = whoseTurn(state);
call    0 returned 6
        6: 1356:  int nextPlayer = currentPlayer + 1;
        6: 1357:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 4 (fallthrough)
branch  1 taken 2
        4: 1358:    nextPlayer = 0;
        -: 1359:  }
        -: 1360:  //set outpost flag
        6: 1361:      state->outpostPlayed++;
        -: 1362:			
        -: 1363:      //discard card
        6: 1364:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 6
        6: 1365:      return 0;
        -: 1366:}
        -: 1367://end of dominion.c
        -: 1368:
