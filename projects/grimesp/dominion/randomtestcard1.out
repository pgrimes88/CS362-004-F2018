Random Test Smithy.c
Test #1 Pass count 50000/50000  (Supply Count Unchanged)
Test #2 Pass count 50000/50000  (other players unchanged (handcount, deckcount, actions and whoseturn))
Test #3 Pass count 0/50000  (handcount was changed of current player)
Test #4 Pass count 0/50000  (deckcount was changed of current player
File 'dominion.c'
Lines executed:78.71% of 573
Branches executed:82.94% of 422
Taken at least once:69.67% of 422
Calls executed:69.79% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:18
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1503432 returned 100% blocks executed 100%
  1503432:    8:int compare(const void* a, const void* b) {
  1503432:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 19 (fallthrough)
branch  1 taken 1503413
       19:   10:    return 1;
  1503413:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 400909 (fallthrough)
branch  1 taken 1102504
   400909:   12:    return -1;
  1102504:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 5 returned 100% blocks executed 100%
        5:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        5:   23:  int* k = malloc(10 * sizeof(int));
        5:   24:  k[0] = k1;
        5:   25:  k[1] = k2;
        5:   26:  k[2] = k3;
        5:   27:  k[3] = k4;
        5:   28:  k[4] = k5;
        5:   29:  k[5] = k6;
        5:   30:  k[6] = k7;
        5:   31:  k[7] = k8;
        5:   32:  k[8] = k9;
        5:   33:  k[9] = k10;
        5:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 100136 returned 100% blocks executed 89%
   100136:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   100136:   44:  SelectStream(1);
call    0 returned 100136
   100136:   45:  PutSeed((long)randomSeed);
call    0 returned 100136
        -:   46:  
        -:   47:  //check number of players
   100136:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100136 (fallthrough)
branch  1 taken 0
branch  2 taken 50024 (fallthrough)
branch  3 taken 50112
        -:   49:    {
    50024:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    50112:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   551232:   57:  for (i = 0; i < 10; i++)
branch  0 taken 501120
branch  1 taken 50112 (fallthrough)
        -:   58:    {
  5512320:   59:      for (j = 0; j < 10; j++)
branch  0 taken 5011200
branch  1 taken 501120 (fallthrough)
        -:   60:        {
  5011200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 4510080 (fallthrough)
branch  1 taken 501120
branch  2 taken 0 (fallthrough)
branch  3 taken 4510080
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    50112:   73:  if (numPlayers == 2)
branch  0 taken 50112 (fallthrough)
branch  1 taken 0
        -:   74:    {
    50112:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    50112:   87:  if (numPlayers == 2)
branch  0 taken 50112 (fallthrough)
branch  1 taken 0
        -:   88:    {
    50112:   89:      state->supplyCount[estate] = 8;
    50112:   90:      state->supplyCount[duchy] = 8;
    50112:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    50112:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    50112:  102:  state->supplyCount[silver] = 40;
    50112:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1052352:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1002240
branch  1 taken 50112 (fallthrough)
        -:  107:    {
  8268480:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 7767360
branch  1 taken 501120 (fallthrough)
        -:  109:	{
  7767360:  110:	  if (kingdomCards[j] == i)
branch  0 taken 501120 (fallthrough)
branch  1 taken 7266240
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   501120:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 501120 (fallthrough)
branch  1 taken 0
branch  2 taken 50112 (fallthrough)
branch  3 taken 451008
        -:  114:		{
   100224:  115:		  if (numPlayers == 2){ 
branch  0 taken 50112 (fallthrough)
branch  1 taken 0
    50112:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   451008:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   501120:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  7266240:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   150336:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 100224
branch  1 taken 50112 (fallthrough)
        -:  139:    {
   100224:  140:      state->deckCount[i] = 0;
   400896:  141:      for (j = 0; j < 3; j++)
branch  0 taken 300672
branch  1 taken 100224 (fallthrough)
        -:  142:	{
   300672:  143:	  state->deck[i][j] = estate;
   300672:  144:	  state->deckCount[i]++;
        -:  145:	}
   801792:  146:      for (j = 3; j < 10; j++)
branch  0 taken 701568
branch  1 taken 100224 (fallthrough)
        -:  147:	{
   701568:  148:	  state->deck[i][j] = copper;
   701568:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   150336:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 100224
branch  1 taken 50112 (fallthrough)
        -:  155:    {
   100224:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100224
branch  1 taken 0 (fallthrough)
branch  2 taken 100224
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   150336:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 100224
branch  1 taken 50112 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   100224:  166:      state->handCount[i] = 0;
   100224:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1403136:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1353024
branch  1 taken 50112 (fallthrough)
        -:  177:    {
  1353024:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    50112:  182:  state->outpostPlayed = 0;
    50112:  183:  state->phase = 0;
    50112:  184:  state->numActions = 1;
    50112:  185:  state->numBuys = 1;
    50112:  186:  state->playedCardCount = 0;
    50112:  187:  state->whoseTurn = 0;
    50112:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   300672:  192:  for (it = 0; it < 5; it++){
branch  0 taken 250560
branch  1 taken 50112 (fallthrough)
   250560:  193:    drawCard(state->whoseTurn, state);
call    0 returned 250560
        -:  194:  }
        -:  195:
    50112:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 50112
        -:  197:
    50112:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 100421 returned 100% blocks executed 100%
   100421:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   100421:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   100421:  209:  if (state->deckCount[player] < 1)
branch  0 taken 188 (fallthrough)
branch  1 taken 100233
      188:  210:    return -1;
   100233:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100233
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1202755:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 1002289
branch  1 taken 100233 (fallthrough)
  1002289:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 1002289
  1002289:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1002289:  217:    newDeckPos++;
  3254936:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 2252647
branch  1 taken 1002289 (fallthrough)
  2252647:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1002289:  221:    state->deckCount[player]--;
        -:  222:  }
  1102522:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 1002289
branch  1 taken 100233 (fallthrough)
  1002289:  224:    state->deck[player][i] = newDeck[i];
  1002289:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   100233:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 100000 returned 100% blocks executed 60%
   100000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
   100000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
   100000:  237:  if (state->phase != 0)
branch  0 taken 11407 (fallthrough)
branch  1 taken 88593
        -:  238:    {
    11407:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    88593:  243:  if ( state->numActions < 1 )
branch  0 taken 1 (fallthrough)
branch  1 taken 88592
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    88592:  249:  card = handCard(handPos, state);
call    0 returned 88592
        -:  250:	
        -:  251:  //check if selected card is an action
    88592:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 0 (fallthrough)
branch  1 taken 88592
branch  2 never executed
branch  3 never executed
        -:  253:    {
    88592:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 100000 returned 100% blocks executed 100%
   100000:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
   100000:  280:  who = state->whoseTurn;
        -:  281:
   100000:  282:  if (state->numBuys < 1){
branch  0 taken 11398 (fallthrough)
branch  1 taken 88602
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    11398:  285:    return -1;
    88602:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 88602
branch  1 taken 32724 (fallthrough)
branch  2 taken 55878
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    32724:  289:    return -1;
    55878:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 55878
branch  1 taken 25959 (fallthrough)
branch  2 taken 29919
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    25959:  293:    return -1;
        -:  294:  } else {
    29919:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    29919:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 29919
        -:  298:  
    29919:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 29919
    29919:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    29919:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 50000 returned 100% blocks executed 100%
    50000:  311:int numHandCards(struct gameState *state) {
    50000:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 50000
        -:  313:}
        -:  314:
function handCard called 88592 returned 100% blocks executed 100%
    88592:  315:int handCard(int handPos, struct gameState *state) {
    88592:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 88592
    88592:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 118653 returned 100% blocks executed 100%
   118653:  320:int supplyCount(int card, struct gameState *state) {
   118653:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 14871 returned 100% blocks executed 94%
    14871:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    14871:  326:  int count = 0;
        -:  327:
   771059:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 756188
branch  1 taken 14871 (fallthrough)
        -:  329:    {
   756188:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 7132 (fallthrough)
branch  1 taken 749056
        -:  331:    }
        -:  332:
    53298:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 38427
branch  1 taken 14871 (fallthrough)
        -:  334:    {
    38427:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0 (fallthrough)
branch  1 taken 38427
        -:  336:    }
        -:  337:
   134072:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 119201
branch  1 taken 14871 (fallthrough)
        -:  339:    {
   119201:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 1370 (fallthrough)
branch  1 taken 117831
        -:  341:    }
        -:  342:
    14871:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 5839506 returned 100% blocks executed 100%
  5839506:  346:int whoseTurn(struct gameState *state) {
  5839506:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 50000 returned 100% blocks executed 100%
    50000:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    50000:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 50000
        -:  354:  
        -:  355:  //Discard hand
   367704:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 317704
branch  1 taken 50000 (fallthrough)
   317704:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
   317704:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    50000:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    50000:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 34995 (fallthrough)
branch  1 taken 15005
    34995:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    15005:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    50000:  370:  state->outpostPlayed = 0;
    50000:  371:  state->phase = 0;
    50000:  372:  state->numActions = 1;
    50000:  373:  state->coins = 0;
    50000:  374:  state->numBuys = 1;
    50000:  375:  state->playedCardCount = 0;
    50000:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
   300000:  380:  for (k = 0; k < 5; k++){
branch  0 taken 250000
branch  1 taken 50000 (fallthrough)
   250000:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 250000
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    50000:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 50000
        -:  386:
    50000:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 100012 returned 100% blocks executed 91%
   100012:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
   100012:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 4 (fallthrough)
branch  1 taken 100008
        -:  396:    {
        4:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
   100008:  401:  j = 0;
  2600208:  402:  for (i = 0; i < 25; i++)
branch  0 taken 2500200
branch  1 taken 100008 (fallthrough)
        -:  403:    {
  2500200:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 2500198
        -:  405:	{
        2:  406:	  j++;
        -:  407:	}
        -:  408:    }
   100008:  409:  if ( j >= 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 100008
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
   100008:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 100000 returned 100% blocks executed 88%
   100000:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
   100000:  420:  int score = 0;
        -:  421:  //score from hand
   434814:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 334814
branch  1 taken 100000 (fallthrough)
        -:  423:    {
   334814:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 334814
   334814:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 67599 (fallthrough)
branch  1 taken 267215
   334814:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 334814
   334814:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 334814
   334814:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 334814
   334814:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 334814
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
   490477:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 390477
branch  1 taken 100000 (fallthrough)
        -:  434:    {
   390477:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 5466 (fallthrough)
branch  1 taken 385011
   390477:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 54488 (fallthrough)
branch  1 taken 335989
   390477:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 3932 (fallthrough)
branch  1 taken 386545
   390477:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 3918 (fallthrough)
branch  1 taken 386559
   390477:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 3379 (fallthrough)
branch  1 taken 387098
   390477:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 4673 (fallthrough)
branch  1 taken 385804
call    2 returned 4673
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
   490477:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 390477
branch  1 taken 100000 (fallthrough)
        -:  445:    {
   390477:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 10528 (fallthrough)
branch  1 taken 379949
   390477:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 40118 (fallthrough)
branch  1 taken 350359
   390477:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 10440 (fallthrough)
branch  1 taken 380037
   390477:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 10392 (fallthrough)
branch  1 taken 380085
   390477:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 10507 (fallthrough)
branch  1 taken 379970
   390477:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 10198 (fallthrough)
branch  1 taken 380279
call    2 returned 10198
        -:  452:    }
        -:  453:
   100000:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 50000 returned 100% blocks executed 100%
    50000:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
   250000:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
   200000:  467:      if (i >= state->numPlayers)
branch  0 taken 100000 (fallthrough)
branch  1 taken 100000
        -:  468:	{
   100000:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
   100000:  473:	  players[i] = scoreFor (i, state);
call    0 returned 100000
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    50000:  478:  j = 0;
   250000:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  480:    {
   200000:  481:      if (players[i] > players[j])
branch  0 taken 16626 (fallthrough)
branch  1 taken 183374
        -:  482:	{
    16626:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    50000:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    50000:  489:  currentPlayer = whoseTurn(state);
call    0 returned 50000
   250000:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  491:    {
   200000:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 55614 (fallthrough)
branch  1 taken 144386
branch  2 taken 14292 (fallthrough)
branch  3 taken 41322
        -:  493:	{
    14292:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    50000:  499:  j = 0;
   250000:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  501:    {
   200000:  502:      if ( players[i] > players[j] )
branch  0 taken 19365 (fallthrough)
branch  1 taken 180635
        -:  503:	{
    19365:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    50000:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
   250000:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  511:    {
   200000:  512:      if ( players[i] == highScore )
branch  0 taken 52875 (fallthrough)
branch  1 taken 147125
        -:  513:	{
    52875:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
   147125:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    50000:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 900672 returned 100% blocks executed 100%
   900672:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   900672:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 105 (fallthrough)
branch  1 taken 900567
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
      154:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 49
branch  1 taken 105 (fallthrough)
       49:  533:      state->deck[player][i] = state->discard[player][i];
       49:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
      105:  537:    state->deckCount[player] = state->discardCount[player];
      105:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
      105:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 105
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
      105:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
      105:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
      105:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
      105:  558:    if (deckCounter == 0)
branch  0 taken 96 (fallthrough)
branch  1 taken 9
       96:  559:      return -1;
        -:  560:      
        9:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        9:  562:    state->deckCount[player]--;
        9:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
   900567:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
   900567:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
   900567:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   900567:  575:    state->deckCount[player]--;
   900567:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
   900576:  579:  return 0;
        -:  580:}
        -:  581:
function getCost called 85911 returned 100% blocks executed 67%
    85911:  582:int getCost(int cardNumber)
        -:  583:{
    85911:  584:  switch( cardNumber ) 
branch  0 taken 6637
branch  1 taken 6773
branch  2 taken 3856
branch  3 taken 3643
branch  4 taken 6592
branch  5 taken 6051
branch  6 taken 3632
branch  7 taken 3684
branch  8 taken 0
branch  9 taken 0
branch 10 taken 5017
branch 11 taken 3925
branch 12 taken 0
branch 13 taken 4992
branch 14 taken 6493
branch 15 taken 0
branch 16 taken 0
branch 17 taken 3788
branch 18 taken 0
branch 19 taken 3939
branch 20 taken 0
branch 21 taken 5172
branch 22 taken 6740
branch 23 taken 0
branch 24 taken 0
branch 25 taken 4976
branch 26 taken 0
branch 27 taken 1
        -:  585:    {
        -:  586:    case curse:
     6637:  587:      return 0;
        -:  588:    case estate:
     6773:  589:      return 2;
        -:  590:    case duchy:
     3856:  591:      return 5;
        -:  592:    case province:
     3643:  593:      return 8;
        -:  594:    case copper:
     6592:  595:      return 0;
        -:  596:    case silver:
     6051:  597:      return 3;
        -:  598:    case gold:
     3632:  599:      return 6;
        -:  600:    case adventurer:
     3684:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
     5017:  607:      return 4;
        -:  608:    case mine:
     3925:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
     4992:  613:      return 4;
        -:  614:    case village:
     6493:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
     3788:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
     3939:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
     5172:  629:      return 4;
        -:  630:    case embargo: 
     6740:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
     4976:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
        1:  642:  return -1;
        -:  643:}
        -:  644:
function cardEffect called 100730 returned 100% blocks executed 51%
   100730:  645:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:{
        -:  647:  int i;
        -:  648:  int j;
        -:  649:  int k;
        -:  650:  int x;
        -:  651:  int index;
   100730:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 100730
   100730:  653:  int nextPlayer = currentPlayer + 1;
   100730:  654:  int tributeRevealedCards[2] = {-1, -1};
        -:  655:  int temphand[MAX_HAND];// moved above the if statement
   100730:  656:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 60362 (fallthrough)
branch  1 taken 40368
    60362:  657:    nextPlayer = 0;
        -:  658:  }
        -:  659:  
        -:  660:	
        -:  661:  //uses switch to select card and perform actions
   100730:  662:  switch( card ) 
branch  0 taken 50146
branch  1 taken 20
branch  2 taken 50020
branch  3 taken 18
branch  4 taken 18
branch  5 taken 36
branch  6 taken 20
branch  7 taken 24
branch  8 taken 16
branch  9 taken 16
branch 10 taken 20
branch 11 taken 36
branch 12 taken 26
branch 13 taken 28
branch 14 taken 36
branch 15 taken 4
branch 16 taken 26
branch 17 taken 24
branch 18 taken 20
branch 19 taken 176
        -:  663:    {
        -:  664:    case adventurer:
    50146:  665:      return adventurerFunction(state);
call    0 returned 50146
        -:  666:			
        -:  667:    case council_room:
       20:  668:      return council_roomFunction(handPos, state);
call    0 returned 20
        -:  669:    
        -:  670:    case smithy:
    50020:  671:      return smithyFunction(handPos, state);
call    0 returned 50020
        -:  672:		
        -:  673:		case great_hall:
       18:  674:		  return great_hallFunction(handPos, state);
call    0 returned 18
        -:  675:		
        -:  676:		case outpost:
       18:  677:		  return outpostFunction(handPos, state);
call    0 returned 18
        -:  678:		  
        -:  679:    case feast:
        -:  680:      //gain card with cost up to 5
        -:  681:      //Backup hand
      366:  682:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 330
branch  1 taken 36 (fallthrough)
      330:  683:	temphand[i] = state->hand[currentPlayer][i];//Backup card
      330:  684:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  685:      }
        -:  686:      //Backup hand
        -:  687:
        -:  688:      //Update Coins for Buy
       36:  689:      updateCoins(currentPlayer, state, 5);
call    0 returned 36
       36:  690:      x = 1;//Condition to loop on
      108:  691:      while( x == 1) {//Buy one card
branch  0 taken 36
branch  1 taken 36 (fallthrough)
       36:  692:	if (supplyCount(choice1, state) <= 0){
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0
        -:  693:	  if (DEBUG)
        -:  694:	    printf("None of that card left, sorry!\n");
        -:  695:
        -:  696:	  if (DEBUG){
        -:  697:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  698:	  }
        -:  699:	}
       36:  700:	else if (state->coins < getCost(choice1)){
call    0 returned 36
branch  1 taken 0 (fallthrough)
branch  2 taken 36
    #####:  701:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  702:
        -:  703:	  if (DEBUG){
        -:  704:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  705:	  }
        -:  706:	}
        -:  707:	else{
        -:  708:
        -:  709:	  if (DEBUG){
        -:  710:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  711:	  }
        -:  712:
       36:  713:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 36
       36:  714:	  x = 0;//No more buying cards
        -:  715:
        -:  716:	  if (DEBUG){
        -:  717:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  718:	  }
        -:  719:
        -:  720:	}
        -:  721:      }     
        -:  722:
        -:  723:      //Reset Hand
      366:  724:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 330
branch  1 taken 36 (fallthrough)
      330:  725:	state->hand[currentPlayer][i] = temphand[i];
      330:  726:	temphand[i] = -1;
        -:  727:      }
        -:  728:      //Reset Hand
        -:  729:      			
       36:  730:      return 0;
        -:  731:			
        -:  732:    case gardens:
       20:  733:      return -1;
        -:  734:			
        -:  735:    case mine:
       24:  736:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
       24:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 23 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 23
        -:  739:	{
        1:  740:	  return -1;
        -:  741:	}
        -:  742:		
       23:  743:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 23 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 23
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:
       23:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 23
call    1 returned 23
branch  2 taken 23 (fallthrough)
branch  3 taken 0
        -:  749:	{
       23:  750:	  return -1;
        -:  751:	}
        -:  752:
    #####:  753:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  754:
        -:  755:      //discard card from hand
    #####:  756:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  757:
        -:  758:      //discard trashed card
    #####:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  760:	{
    #####:  761:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  762:	    {
    #####:  763:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
    #####:  768:      return 0;
        -:  769:			
        -:  770:    case remodel:
       16:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
       16:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 16
call    1 returned 16
branch  2 taken 16 (fallthrough)
branch  3 taken 0
        -:  774:	{
       16:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:
        -:  793:
    #####:  794:      return 0;
        -:  795:      
        -:  796:		
        -:  797:    case village:
        -:  798:      //+1 Card
       16:  799:      drawCard(currentPlayer, state);
call    0 returned 16
        -:  800:			
        -:  801:      //+2 Actions
       16:  802:      state->numActions = state->numActions + 2;
        -:  803:			
        -:  804:      //discard played card from hand
       16:  805:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 16
       16:  806:      return 0;
        -:  807:		
        -:  808:    case baron:
       20:  809:      state->numBuys++;//Increase buys by 1!
       20:  810:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####:  811:	int p = 0;//Iterator for hand!
    #####:  812:	int card_not_discarded = 1;//Flag for discard set!
    #####:  813:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  814:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  815:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  816:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  817:	    state->discardCount[currentPlayer]++;
    #####:  818:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  819:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  820:	    }
    #####:  821:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  822:	    state->handCount[currentPlayer]--;
    #####:  823:	    card_not_discarded = 0;//Exit the loop
        -:  824:	  }
    #####:  825:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  826:	    if(DEBUG) {
        -:  827:	      printf("No estate cards in your hand, invalid choice\n");
        -:  828:	      printf("Must gain an estate if there are any\n");
        -:  829:	    }
    #####:  830:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  831:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  832:	      state->supplyCount[estate]--;//Decrement estates
    #####:  833:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  834:		isGameOver(state);
call    0 never executed
        -:  835:	      }
        -:  836:	    }
    #####:  837:	    card_not_discarded = 0;//Exit the loop
        -:  838:	  }
        -:  839:			    
        -:  840:	  else{
    #####:  841:	    p++;//Next card
        -:  842:	  }
        -:  843:	}
        -:  844:      }
        -:  845:			    
        -:  846:      else{
       20:  847:	if (supplyCount(estate, state) > 0){
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0
       20:  848:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 20
       20:  849:	  state->supplyCount[estate]--;//Decrement Estates
       20:  850:	  if (supplyCount(estate, state) == 0){
call    0 returned 20
branch  1 taken 0 (fallthrough)
branch  2 taken 20
    #####:  851:	    isGameOver(state);
call    0 never executed
        -:  852:	  }
        -:  853:	}
        -:  854:      }
        -:  855:	    
        -:  856:      
       20:  857:      return 0;
        -:  858:		
        -:  859:		
        -:  860:    case minion:
        -:  861:      //+1 action
       36:  862:      state->numActions++;
        -:  863:			
        -:  864:      //discard card from hand
       36:  865:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 36
        -:  866:			
       36:  867:      if (choice1)		//+2 coins
branch  0 taken 0 (fallthrough)
branch  1 taken 36
        -:  868:	{
    #####:  869:	  state->coins = state->coins + 2;
        -:  870:	}
        -:  871:			
       36:  872:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 0 (fallthrough)
branch  1 taken 36
        -:  873:	{
        -:  874:	  //discard hand
    #####:  875:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  876:	    {
    #####:  877:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:	    }
        -:  879:				
        -:  880:	  //draw 4
    #####:  881:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  884:	    }
        -:  885:				
        -:  886:	  //other players discard hand and redraw if hand size > 4
    #####:  887:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  890:		{
    #####:  891:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  892:		    {
        -:  893:		      //discard hand
    #####:  894:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  895:			{
    #####:  896:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  897:			}
        -:  898:							
        -:  899:		      //draw 4
    #####:  900:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  901:			{
    #####:  902:			  drawCard(i, state);
call    0 never executed
        -:  903:			}
        -:  904:		    }
        -:  905:		}
        -:  906:	    }
        -:  907:				
        -:  908:	}
       36:  909:      return 0;
        -:  910:		
        -:  911:    case steward:
       26:  912:      if (choice1 == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 26
        -:  913:	{
        -:  914:	  //+2 cards
    #####:  915:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  916:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  917:	}
       26:  918:      else if (choice1 == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 26
        -:  919:	{
        -:  920:	  //+2 coins
    #####:  921:	  state->coins = state->coins + 2;
        -:  922:	}
        -:  923:      else
        -:  924:	{
        -:  925:	  //trash 2 cards in hand
       26:  926:	  discardCard(choice2, currentPlayer, state, 1);
call    0 returned 26
       26:  927:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 26
        -:  928:	}
        -:  929:			
        -:  930:      //discard card from hand
       26:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 26
       26:  932:      return 0;
        -:  933:		
        -:  934:    case tribute:
       28:  935:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 taken 0 (fallthrough)
branch  1 taken 28
    #####:  936:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  937:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  938:	  state->deckCount[nextPlayer]--;
        -:  939:	}
    #####:  940:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  942:	  state->discardCount[nextPlayer]--;
        -:  943:	}
        -:  944:	else{
        -:  945:	  //No Card to Reveal
        -:  946:	  if (DEBUG){
        -:  947:	    printf("No cards to reveal\n");
        -:  948:	  }
        -:  949:	}
        -:  950:      }
        -:  951:	    
        -:  952:      else{
       28:  953:	if (state->deckCount[nextPlayer] == 0){
branch  0 taken 0 (fallthrough)
branch  1 taken 28
    #####:  954:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  955:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  956:	    state->deckCount[nextPlayer]++;
    #####:  957:	    state->discard[nextPlayer][i] = -1;
    #####:  958:	    state->discardCount[nextPlayer]--;
        -:  959:	  }
        -:  960:			    
    #####:  961:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  962:	} 
       28:  963:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       28:  964:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       28:  965:	state->deckCount[nextPlayer]--;
       28:  966:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       28:  967:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       28:  968:	state->deckCount[nextPlayer]--;
        -:  969:      }    
        -:  970:		       
       28:  971:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 taken 17 (fallthrough)
branch  1 taken 11
       17:  972:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       17:  973:	state->playedCardCount++;
       17:  974:	tributeRevealedCards[1] = -1;
        -:  975:      }
        -:  976:
      112:  977:      for (i = 0; i <= 2; i ++){
branch  0 taken 84
branch  1 taken 28 (fallthrough)
       84:  978:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 taken 66 (fallthrough)
branch  1 taken 18
branch  2 taken 63 (fallthrough)
branch  3 taken 3
branch  4 taken 7 (fallthrough)
branch  5 taken 56
       28:  979:	  state->coins += 2;
        -:  980:	}
        -:  981:		    
       56:  982:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 taken 45 (fallthrough)
branch  1 taken 11
branch  2 taken 45 (fallthrough)
branch  3 taken 0
branch  4 taken 45 (fallthrough)
branch  5 taken 0
branch  6 taken 45 (fallthrough)
branch  7 taken 0
branch  8 taken 0 (fallthrough)
branch  9 taken 45
       11:  983:	  drawCard(currentPlayer, state);
call    0 returned 11
       11:  984:	  drawCard(currentPlayer, state);
call    0 returned 11
        -:  985:	}
        -:  986:	else{//Action Card
       45:  987:	  state->numActions = state->numActions + 2;
        -:  988:	}
        -:  989:      }
        -:  990:	    
       28:  991:      return 0;
        -:  992:		
        -:  993:    case ambassador:
       36:  994:      j = 0;		//used to check if player has enough cards to discard
        -:  995:
       36:  996:      if (choice2 > 2 || choice2 < 0)
branch  0 taken 36 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 36
        -:  997:	{
    #####:  998:	  return -1;				
        -:  999:	}
        -: 1000:
       36: 1001:      if (choice1 == handPos)
branch  0 taken 36 (fallthrough)
branch  1 taken 0
        -: 1002:	{
       36: 1003:	  return -1;
        -: 1004:	}
        -: 1005:
    #####: 1006:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
    #####: 1008:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1009:	    {
    #####: 1010:	      j++;
        -: 1011:	    }
        -: 1012:	}
    #####: 1013:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1014:	{
    #####: 1015:	  return -1;				
        -: 1016:	}
        -: 1017:
        -: 1018:      if (DEBUG) 
        -: 1019:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1020:
        -: 1021:      //increase supply count for choosen card by amount being discarded
    #####: 1022:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1023:			
        -: 1024:      //each other player gains a copy of revealed card
    #####: 1025:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1026:	{
    #####: 1027:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1028:	    {
    #####: 1029:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1030:	    }
        -: 1031:	}
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1035:
        -: 1036:      //trash copies of cards returned to supply
    #####: 1037:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1038:	{
    #####: 1039:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1040:	    {
    #####: 1041:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1042:		{
    #####: 1043:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1044:		  break;
        -: 1045:		}
        -: 1046:	    }
        -: 1047:	}			
        -: 1048:
    #####: 1049:      return 0;
        -: 1050:		
        -: 1051:    case cutpurse:
        -: 1052:
        4: 1053:      updateCoins(currentPlayer, state, 2);
call    0 returned 4
       12: 1054:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        -: 1055:	{
        8: 1056:	  if (i != currentPlayer)
branch  0 taken 4 (fallthrough)
branch  1 taken 4
        -: 1057:	    {
        6: 1058:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        -: 1059:		{
        4: 1060:		  if (state->hand[i][j] == copper)
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        -: 1061:		    {
        2: 1062:		      discardCard(j, i, state, 0);
call    0 returned 2
        2: 1063:		      break;
        -: 1064:		    }
        2: 1065:		  if (j == state->handCount[i])
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -: 1066:		    {
    #####: 1067:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1068:			{
        -: 1069:			  if (DEBUG)
        -: 1070:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1071:			}	
    #####: 1072:		      break;
        -: 1073:		    }		
        -: 1074:		}
        -: 1075:					
        -: 1076:	    }
        -: 1077:				
        -: 1078:	}				
        -: 1079:
        -: 1080:      //discard played card from hand
        4: 1081:      discardCard(handPos, currentPlayer, state, 0);			
call    0 returned 4
        -: 1082:
        4: 1083:      return 0;
        -: 1084:
        -: 1085:		
        -: 1086:    case embargo: 
        -: 1087:      //+2 Coins
       26: 1088:      state->coins = state->coins + 2;
        -: 1089:			
        -: 1090:      //see if selected pile is in play
       26: 1091:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 26
        -: 1092:	{
    #####: 1093:	  return -1;
        -: 1094:	}
        -: 1095:			
        -: 1096:      //add embargo token to selected supply pile
       26: 1097:      state->embargoTokens[choice1]++;
        -: 1098:			
        -: 1099:      //trash card
       26: 1100:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 26
       26: 1101:      return 0;
        -: 1102:		
        -: 1103:    case sea_hag:
       72: 1104:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 48
branch  1 taken 24 (fallthrough)
       48: 1105:	if (i != currentPlayer){
branch  0 taken 30 (fallthrough)
branch  1 taken 18
       30: 1106:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
       30: 1107:	  state->discardCount[i]++;
       30: 1108:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1109:	}
        -: 1110:      }
       24: 1111:      return 0;
        -: 1112:		
        -: 1113:    case treasure_map:
        -: 1114:      //search hand for another treasure_map
       20: 1115:      index = -1;
      164: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 144
branch  1 taken 20 (fallthrough)
        -: 1117:	{
      144: 1118:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 0 (fallthrough)
branch  1 taken 144
branch  2 never executed
branch  3 never executed
        -: 1119:	    {
    #####: 1120:	      index = i;
    #####: 1121:	      break;
        -: 1122:	    }
        -: 1123:	}
       20: 1124:      if (index > -1)
branch  0 taken 0 (fallthrough)
branch  1 taken 20
        -: 1125:	{
        -: 1126:	  //trash both treasure cards
    #####: 1127:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1128:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1129:
        -: 1130:	  //gain 4 Gold cards
    #####: 1131:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1132:	    {
    #####: 1133:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1134:	    }
        -: 1135:				
        -: 1136:	  //return success
    #####: 1137:	  return 1;
        -: 1138:	}
        -: 1139:			
        -: 1140:      //no second treasure_map found in hand
       20: 1141:      return -1;
        -: 1142:    }
        -: 1143:	
      176: 1144:  return -1;
        -: 1145:}
        -: 1146:
function discardCard called 50238 returned 100% blocks executed 89%
    50238: 1147:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1148:{
        -: 1149:	
        -: 1150:  //if card is not trashed, added to Played pile 
    50238: 1151:  if (trashFlag < 1)
branch  0 taken 50160 (fallthrough)
branch  1 taken 78
        -: 1152:    {
        -: 1153:      //add card to played pile
    50160: 1154:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    50160: 1155:      state->playedCardCount++;
        -: 1156:    }
        -: 1157:	
        -: 1158:  //set played card to -1
    50238: 1159:  state->hand[currentPlayer][handPos] = -1;
        -: 1160:	
        -: 1161:  //remove card from player's hand
    50238: 1162:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 20 (fallthrough)
branch  1 taken 50218
        -: 1163:    {
        -: 1164:      //reduce number of cards in hand
       20: 1165:      state->handCount[currentPlayer]--;
        -: 1166:    }
    50218: 1167:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 50218
        -: 1168:    {
        -: 1169:      //reduce number of cards in hand
    #####: 1170:      state->handCount[currentPlayer]--;
        -: 1171:    }
        -: 1172:  else 	
        -: 1173:    {
        -: 1174:      //replace discarded card with last card in hand
    50218: 1175:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1176:      //set last card to -1
    50218: 1177:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1178:      //reduce number of cards in hand
    50218: 1179:      state->handCount[currentPlayer]--;
        -: 1180:    }
        -: 1181:	
    50238: 1182:  return 0;
        -: 1183:}
        -: 1184:
function gainCard called 29975 returned 100% blocks executed 70%
    29975: 1185:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1186:{
        -: 1187:  //Note: supplyPos is enum of choosen card
        -: 1188:	
        -: 1189:  //check if supply pile is empty (0) or card is not used in game (-1)
    29975: 1190:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 29975
branch  1 taken 0 (fallthrough)
branch  2 taken 29975
        -: 1191:    {
    #####: 1192:      return -1;
        -: 1193:    }
        -: 1194:	
        -: 1195:  //added card for [whoseTurn] current player:
        -: 1196:  // toFlag = 0 : add to discard
        -: 1197:  // toFlag = 1 : add to deck
        -: 1198:  // toFlag = 2 : add to hand
        -: 1199:
    29975: 1200:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 29975
        -: 1201:    {
    #####: 1202:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1203:      state->deckCount[player]++;
        -: 1204:    }
    29975: 1205:  else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 29975
        -: 1206:    {
    #####: 1207:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1208:      state->handCount[player]++;
        -: 1209:    }
        -: 1210:  else
        -: 1211:    {
    29975: 1212:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    29975: 1213:      state->discardCount[player]++;
        -: 1214:    }
        -: 1215:	
        -: 1216:  //decrease number in supply pile
    29975: 1217:  state->supplyCount[supplyPos]--;
        -: 1218:	 
    29975: 1219:  return 0;
        -: 1220:}
        -: 1221:
function updateCoins called 100290 returned 100% blocks executed 100%
   100290: 1222:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1223:{
        -: 1224:  int i;
        -: 1225:	
        -: 1226:  //reset coin count
   100290: 1227:  state->coins = 0;
        -: 1228:
        -: 1229:  //add coins for each Treasure card in player's hand
   601838: 1230:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 501548
branch  1 taken 100290 (fallthrough)
        -: 1231:    {
   501548: 1232:      if (state->hand[player][i] == copper)
branch  0 taken 332364 (fallthrough)
branch  1 taken 169184
        -: 1233:	{
   332364: 1234:	  state->coins += 1;
        -: 1235:	}
   169184: 1236:      else if (state->hand[player][i] == silver)
branch  0 taken 16881 (fallthrough)
branch  1 taken 152303
        -: 1237:	{
    16881: 1238:	  state->coins += 2;
        -: 1239:	}
   152303: 1240:      else if (state->hand[player][i] == gold)
branch  0 taken 16501 (fallthrough)
branch  1 taken 135802
        -: 1241:	{
    16501: 1242:	  state->coins += 3;
        -: 1243:	}	
        -: 1244:    }	
        -: 1245:
        -: 1246:  //add bonus
   100290: 1247:  state->coins += bonus;
        -: 1248:
   100290: 1249:  return 0;
        -: 1250:}
        -: 1251:
function adventurerFunction called 50146 returned 100% blocks executed 100%
    50146: 1252:int adventurerFunction(struct gameState *state){
    50146: 1253:  int currentPlayer = whoseTurn(state);
call    0 returned 50146
    50146: 1254:  int nextPlayer = currentPlayer + 1;
        -: 1255:  int temphand[MAX_HAND];// moved above the if statement
    50146: 1256:  int drawntreasure=0;
        -: 1257:  int cardDrawn;
    50146: 1258:  int z = 0;// this is the counter for the temp hand
    50146: 1259:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 30012 (fallthrough)
branch  1 taken 20134
    30012: 1260:    nextPlayer = 0;
        -: 1261:  }
   250536: 1262:  while(drawntreasure<2){
branch  0 taken 150244
branch  1 taken 50146 (fallthrough)
   150244: 1263:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 92 (fallthrough)
branch  1 taken 150152
       92: 1264:	  shuffle(currentPlayer, state);
call    0 returned 92
        -: 1265:	}
   150244: 1266:	drawCard(currentPlayer, state);
call    0 returned 150244
   150244: 1267:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   150244: 1268:	if (cardDrawn == copper || cardDrawn == silver)
branch  0 taken 99785 (fallthrough)
branch  1 taken 50459
branch  2 taken 49833 (fallthrough)
branch  3 taken 49952
   100292: 1269:	  drawntreasure++;
        -: 1270:	else{
    49952: 1271:	  temphand[z]=cardDrawn;
    49952: 1272:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    49952: 1273:	  z++;
        -: 1274:	}
        -: 1275:      }
   150244: 1276:      while(z-1>=0){
branch  0 taken 49952
branch  1 taken 50146 (fallthrough)
    49952: 1277:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    49952: 1278:	z=z-1;
        -: 1279:      }
    50146: 1280:      return 0;
        -: 1281:}
        -: 1282:
function council_roomFunction called 20 returned 100% blocks executed 100%
       20: 1283:int council_roomFunction(int handPos, struct gameState *state){
        -: 1284:  int i;
       20: 1285:  int currentPlayer = whoseTurn(state);
call    0 returned 20
       20: 1286:  int nextPlayer = currentPlayer + 1;
       20: 1287:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 12 (fallthrough)
branch  1 taken 8
       12: 1288:    nextPlayer = 0;
        -: 1289:  }
        -: 1290:  //+4 Cards
      100: 1291:      for (i = 0; i < 4; i++)
branch  0 taken 80
branch  1 taken 20 (fallthrough)
        -: 1292:	{
       80: 1293:	  drawCard(currentPlayer, state);
call    0 returned 80
        -: 1294:	}
        -: 1295:			
        -: 1296:      //+1 Buy
       20: 1297:      state->numBuys++;
        -: 1298:			
        -: 1299:      //Each other player draws a card
       40: 1300:      for (i = 0; i < state->numPlayers - 1; i++)
branch  0 taken 20
branch  1 taken 20 (fallthrough)
        -: 1301:	{
       20: 1302:	  if ( i != currentPlayer )
branch  0 taken 12 (fallthrough)
branch  1 taken 8
        -: 1303:	    {
       12: 1304:	      drawCard(i, state);
call    0 returned 12
        -: 1305:	    }
        -: 1306:	}
        -: 1307:			
        -: 1308:      //put played card in played card pile
       20: 1309:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 20
        -: 1310:			
       20: 1311:      return 0;
        -: 1312:}
        -: 1313:
function smithyFunction called 50020 returned 100% blocks executed 100%
    50020: 1314:int smithyFunction(int handPos,struct gameState *state){
        -: 1315:  int i;
    50020: 1316:  int currentPlayer = whoseTurn(state);
call    0 returned 50020
    50020: 1317:  int nextPlayer = currentPlayer + 1;
        -: 1318:
    50020: 1319:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 30008 (fallthrough)
branch  1 taken 20012
    30008: 1320:    nextPlayer = 0;
        -: 1321:  }
        -: 1322:  //+3 Cards
   150060: 1323:      for (i = 0; i < 2; i++)
branch  0 taken 100040
branch  1 taken 50020 (fallthrough)
        -: 1324:	{
   100040: 1325:	  drawCard(currentPlayer, state);
call    0 returned 100040
        -: 1326:	}
        -: 1327:			
        -: 1328:      //discard card from hand
    50020: 1329:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 50020
    50020: 1330:      return 0;
        -: 1331:		
        -: 1332:}
        -: 1333:
function great_hallFunction called 18 returned 100% blocks executed 100%
       18: 1334:int great_hallFunction(int handPos, struct gameState *state){
       18: 1335:  int currentPlayer = whoseTurn(state);
call    0 returned 18
       18: 1336:  int nextPlayer = currentPlayer + 1;
       18: 1337:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 10 (fallthrough)
branch  1 taken 8
       10: 1338:    nextPlayer = 0;
        -: 1339:  }
        -: 1340:  //+1 Card
       18: 1341:      drawCard(currentPlayer, state);
call    0 returned 18
        -: 1342:			
        -: 1343:      //+1 Actions
       18: 1344:      state->numActions++;
        -: 1345:      //+1 Buy (bug)
       18: 1346:      state->numBuys++;
        -: 1347:      
        -: 1348:			
        -: 1349:      //discard card from hand
       18: 1350:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 18
       18: 1351:      return 0;
        -: 1352:}
        -: 1353:
function outpostFunction called 18 returned 100% blocks executed 100%
       18: 1354:int outpostFunction(int handPos, struct gameState *state){
       18: 1355:  int currentPlayer = whoseTurn(state);
call    0 returned 18
       18: 1356:  int nextPlayer = currentPlayer + 1;
       18: 1357:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 14 (fallthrough)
branch  1 taken 4
       14: 1358:    nextPlayer = 0;
        -: 1359:  }
        -: 1360:  //set outpost flag
       18: 1361:      state->outpostPlayed++;
        -: 1362:			
        -: 1363:      //discard card
       18: 1364:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 18
       18: 1365:      return 0;
        -: 1366:}
        -: 1367://end of dominion.c
        -: 1368:
