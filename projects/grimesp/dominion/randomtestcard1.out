Random Test Smithy.c
Test #1 Pass count 50000/50000  (Supply Count Unchanged)
Test #2 Pass count 50000/50000  (other players unchanged (handcount, deckcount, actions and whoseturn))
Test #3 Pass count 0/50000  (handcount was changed of current player)
Test #4 Pass count 0/50000  (deckcount was changed of current player
File 'dominion.c'
Lines executed:78.01% of 573
Branches executed:82.94% of 422
Taken at least once:68.72% of 422
Calls executed:68.75% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1504559 returned 100% blocks executed 100%
  1504559:    8:int compare(const void* a, const void* b) {
  1504559:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 18 (fallthrough)
branch  1 taken 1504541
       18:   10:    return 1;
  1504541:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 401201 (fallthrough)
branch  1 taken 1103340
   401201:   12:    return -1;
  1103340:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 1 returned 100% blocks executed 100%
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 1 returned 100% blocks executed 100%
        1:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        1:   23:  int* k = malloc(10 * sizeof(int));
        1:   24:  k[0] = k1;
        1:   25:  k[1] = k2;
        1:   26:  k[2] = k3;
        1:   27:  k[3] = k4;
        1:   28:  k[4] = k5;
        1:   29:  k[5] = k6;
        1:   30:  k[6] = k7;
        1:   31:  k[7] = k8;
        1:   32:  k[8] = k9;
        1:   33:  k[9] = k10;
        1:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 100000 returned 100% blocks executed 89%
   100000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
   100000:   44:  SelectStream(1);
call    0 returned 100000
   100000:   45:  PutSeed((long)randomSeed);
call    0 returned 100000
        -:   46:  
        -:   47:  //check number of players
   100000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100000 (fallthrough)
branch  1 taken 0
branch  2 taken 49850 (fallthrough)
branch  3 taken 50150
        -:   49:    {
    49850:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    50150:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   551650:   57:  for (i = 0; i < 10; i++)
branch  0 taken 501500
branch  1 taken 50150 (fallthrough)
        -:   58:    {
  5516500:   59:      for (j = 0; j < 10; j++)
branch  0 taken 5015000
branch  1 taken 501500 (fallthrough)
        -:   60:        {
  5015000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 4513500 (fallthrough)
branch  1 taken 501500
branch  2 taken 0 (fallthrough)
branch  3 taken 4513500
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    50150:   73:  if (numPlayers == 2)
branch  0 taken 50150 (fallthrough)
branch  1 taken 0
        -:   74:    {
    50150:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    50150:   87:  if (numPlayers == 2)
branch  0 taken 50150 (fallthrough)
branch  1 taken 0
        -:   88:    {
    50150:   89:      state->supplyCount[estate] = 8;
    50150:   90:      state->supplyCount[duchy] = 8;
    50150:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    50150:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    50150:  102:  state->supplyCount[silver] = 40;
    50150:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1053150:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1003000
branch  1 taken 50150 (fallthrough)
        -:  107:    {
  8274750:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 7773250
branch  1 taken 501500 (fallthrough)
        -:  109:	{
  7773250:  110:	  if (kingdomCards[j] == i)
branch  0 taken 501500 (fallthrough)
branch  1 taken 7271750
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   501500:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 501500 (fallthrough)
branch  1 taken 0
branch  2 taken 50150 (fallthrough)
branch  3 taken 451350
        -:  114:		{
   100300:  115:		  if (numPlayers == 2){ 
branch  0 taken 50150 (fallthrough)
branch  1 taken 0
    50150:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   451350:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   501500:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  7271750:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   150450:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 100300
branch  1 taken 50150 (fallthrough)
        -:  139:    {
   100300:  140:      state->deckCount[i] = 0;
   401200:  141:      for (j = 0; j < 3; j++)
branch  0 taken 300900
branch  1 taken 100300 (fallthrough)
        -:  142:	{
   300900:  143:	  state->deck[i][j] = estate;
   300900:  144:	  state->deckCount[i]++;
        -:  145:	}
   802400:  146:      for (j = 3; j < 10; j++)
branch  0 taken 702100
branch  1 taken 100300 (fallthrough)
        -:  147:	{
   702100:  148:	  state->deck[i][j] = copper;
   702100:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   150450:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 100300
branch  1 taken 50150 (fallthrough)
        -:  155:    {
   100300:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100300
branch  1 taken 0 (fallthrough)
branch  2 taken 100300
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   150450:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 100300
branch  1 taken 50150 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   100300:  166:      state->handCount[i] = 0;
   100300:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1404200:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1354050
branch  1 taken 50150 (fallthrough)
        -:  177:    {
  1354050:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    50150:  182:  state->outpostPlayed = 0;
    50150:  183:  state->phase = 0;
    50150:  184:  state->numActions = 1;
    50150:  185:  state->numBuys = 1;
    50150:  186:  state->playedCardCount = 0;
    50150:  187:  state->whoseTurn = 0;
    50150:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   300900:  192:  for (it = 0; it < 5; it++){
branch  0 taken 250750
branch  1 taken 50150 (fallthrough)
   250750:  193:    drawCard(state->whoseTurn, state);
call    0 returned 250750
        -:  194:  }
        -:  195:
    50150:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 50150
        -:  197:
    50150:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 100322 returned 100% blocks executed 100%
   100322:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   100322:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   100322:  209:  if (state->deckCount[player] < 1)
branch  0 taken 12 (fallthrough)
branch  1 taken 100310
       12:  210:    return -1;
   100310:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100310
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1203666:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 1003046
branch  1 taken 100310 (fallthrough)
  1003046:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 1003046
  1003046:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1003046:  217:    newDeckPos++;
  3260163:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 2257117
branch  1 taken 1003046 (fallthrough)
  2257117:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1003046:  221:    state->deckCount[player]--;
        -:  222:  }
  1103356:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 1003046
branch  1 taken 100310 (fallthrough)
  1003046:  224:    state->deck[player][i] = newDeck[i];
  1003046:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   100310:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 100000 returned 100% blocks executed 53%
   100000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
   100000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
   100000:  237:  if (state->phase != 0)
branch  0 taken 11314 (fallthrough)
branch  1 taken 88686
        -:  238:    {
    11314:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    88686:  243:  if ( state->numActions < 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 88686
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    88686:  249:  card = handCard(handPos, state);
call    0 returned 88686
        -:  250:	
        -:  251:  //check if selected card is an action
    88686:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 0 (fallthrough)
branch  1 taken 88686
branch  2 never executed
branch  3 never executed
        -:  253:    {
    88686:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 100000 returned 100% blocks executed 100%
   100000:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
   100000:  280:  who = state->whoseTurn;
        -:  281:
   100000:  282:  if (state->numBuys < 1){
branch  0 taken 11276 (fallthrough)
branch  1 taken 88724
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    11276:  285:    return -1;
    88724:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 88724
branch  1 taken 32917 (fallthrough)
branch  2 taken 55807
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    32917:  289:    return -1;
    55807:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 55807
branch  1 taken 26019 (fallthrough)
branch  2 taken 29788
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    26019:  293:    return -1;
        -:  294:  } else {
    29788:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    29788:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 29788
        -:  298:  
    29788:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 29788
    29788:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    29788:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 50000 returned 100% blocks executed 100%
    50000:  311:int numHandCards(struct gameState *state) {
    50000:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 50000
        -:  313:}
        -:  314:
function handCard called 88686 returned 100% blocks executed 100%
    88686:  315:int handCard(int handPos, struct gameState *state) {
    88686:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 88686
    88686:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 118628 returned 100% blocks executed 100%
   118628:  320:int supplyCount(int card, struct gameState *state) {
   118628:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 14836 returned 100% blocks executed 94%
    14836:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    14836:  326:  int count = 0;
        -:  327:
   769346:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 754510
branch  1 taken 14836 (fallthrough)
        -:  329:    {
   754510:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 6951 (fallthrough)
branch  1 taken 747559
        -:  331:    }
        -:  332:
    53298:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 38462
branch  1 taken 14836 (fallthrough)
        -:  334:    {
    38462:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 0 (fallthrough)
branch  1 taken 38462
        -:  336:    }
        -:  337:
   134118:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 119282
branch  1 taken 14836 (fallthrough)
        -:  339:    {
   119282:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 1404 (fallthrough)
branch  1 taken 117878
        -:  341:    }
        -:  342:
    14836:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 5839384 returned 100% blocks executed 100%
  5839384:  346:int whoseTurn(struct gameState *state) {
  5839384:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 50000 returned 100% blocks executed 100%
    50000:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    50000:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 50000
        -:  354:  
        -:  355:  //Discard hand
   366959:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 316959
branch  1 taken 50000 (fallthrough)
   316959:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
   316959:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    50000:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    50000:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 35071 (fallthrough)
branch  1 taken 14929
    35071:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    14929:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    50000:  370:  state->outpostPlayed = 0;
    50000:  371:  state->phase = 0;
    50000:  372:  state->numActions = 1;
    50000:  373:  state->coins = 0;
    50000:  374:  state->numBuys = 1;
    50000:  375:  state->playedCardCount = 0;
    50000:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
   300000:  380:  for (k = 0; k < 5; k++){
branch  0 taken 250000
branch  1 taken 50000 (fallthrough)
   250000:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 250000
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    50000:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 50000
        -:  386:
    50000:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 100000 returned 100% blocks executed 73%
   100000:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
   100000:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 100000
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
   100000:  401:  j = 0;
  2600000:  402:  for (i = 0; i < 25; i++)
branch  0 taken 2500000
branch  1 taken 100000 (fallthrough)
        -:  403:    {
  2500000:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 2500000
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
   100000:  409:  if ( j >= 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 100000
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
   100000:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 100000 returned 100% blocks executed 88%
   100000:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
   100000:  420:  int score = 0;
        -:  421:  //score from hand
   434841:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 334841
branch  1 taken 100000 (fallthrough)
        -:  423:    {
   334841:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 334841
   334841:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 67788 (fallthrough)
branch  1 taken 267053
   334841:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 334841
   334841:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 334841
   334841:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 334841
   334841:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 334841
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
   489413:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 389413
branch  1 taken 100000 (fallthrough)
        -:  434:    {
   389413:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 5715 (fallthrough)
branch  1 taken 383698
   389413:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 54271 (fallthrough)
branch  1 taken 335142
   389413:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 3996 (fallthrough)
branch  1 taken 385417
   389413:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 3776 (fallthrough)
branch  1 taken 385637
   389413:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 3244 (fallthrough)
branch  1 taken 386169
   389413:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 4775 (fallthrough)
branch  1 taken 384638
call    2 returned 4775
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
   489413:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 389413
branch  1 taken 100000 (fallthrough)
        -:  445:    {
   389413:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 9949 (fallthrough)
branch  1 taken 379464
   389413:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 40288 (fallthrough)
branch  1 taken 349125
   389413:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 10134 (fallthrough)
branch  1 taken 379279
   389413:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 10149 (fallthrough)
branch  1 taken 379264
   389413:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 10330 (fallthrough)
branch  1 taken 379083
   389413:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 10061 (fallthrough)
branch  1 taken 379352
call    2 returned 10061
        -:  452:    }
        -:  453:
   100000:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 50000 returned 100% blocks executed 100%
    50000:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
   250000:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
   200000:  467:      if (i >= state->numPlayers)
branch  0 taken 100000 (fallthrough)
branch  1 taken 100000
        -:  468:	{
   100000:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
   100000:  473:	  players[i] = scoreFor (i, state);
call    0 returned 100000
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    50000:  478:  j = 0;
   250000:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  480:    {
   200000:  481:      if (players[i] > players[j])
branch  0 taken 16518 (fallthrough)
branch  1 taken 183482
        -:  482:	{
    16518:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    50000:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    50000:  489:  currentPlayer = whoseTurn(state);
call    0 returned 50000
   250000:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  491:    {
   200000:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 55718 (fallthrough)
branch  1 taken 144282
branch  2 taken 14253 (fallthrough)
branch  3 taken 41465
        -:  493:	{
    14253:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    50000:  499:  j = 0;
   250000:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  501:    {
   200000:  502:      if ( players[i] > players[j] )
branch  0 taken 19238 (fallthrough)
branch  1 taken 180762
        -:  503:	{
    19238:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    50000:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
   250000:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 200000
branch  1 taken 50000 (fallthrough)
        -:  511:    {
   200000:  512:      if ( players[i] == highScore )
branch  0 taken 52998 (fallthrough)
branch  1 taken 147002
        -:  513:	{
    52998:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
   147002:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    50000:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 900223 returned 100% blocks executed 100%
   900223:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   900223:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 22 (fallthrough)
branch  1 taken 900201
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
       68:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 46
branch  1 taken 22 (fallthrough)
       46:  533:      state->deck[player][i] = state->discard[player][i];
       46:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
       22:  537:    state->deckCount[player] = state->discardCount[player];
       22:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
       22:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 22
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
       22:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
       22:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
       22:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
       22:  558:    if (deckCounter == 0)
branch  0 taken 12 (fallthrough)
branch  1 taken 10
       12:  559:      return -1;
        -:  560:      
       10:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       10:  562:    state->deckCount[player]--;
       10:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
   900201:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
   900201:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
   900201:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   900201:  575:    state->deckCount[player]--;
   900201:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
   900211:  579:  return 0;
        -:  580:}
        -:  581:
function getCost called 85695 returned 100% blocks executed 67%
    85695:  582:int getCost(int cardNumber)
        -:  583:{
    85695:  584:  switch( cardNumber ) 
branch  0 taken 6713
branch  1 taken 6523
branch  2 taken 3875
branch  3 taken 3565
branch  4 taken 6672
branch  5 taken 6234
branch  6 taken 3729
branch  7 taken 3650
branch  8 taken 0
branch  9 taken 0
branch 10 taken 5136
branch 11 taken 3793
branch 12 taken 0
branch 13 taken 5141
branch 14 taken 6369
branch 15 taken 0
branch 16 taken 0
branch 17 taken 3992
branch 18 taken 0
branch 19 taken 3715
branch 20 taken 0
branch 21 taken 5127
branch 22 taken 6478
branch 23 taken 0
branch 24 taken 0
branch 25 taken 4982
branch 26 taken 0
branch 27 taken 1
        -:  585:    {
        -:  586:    case curse:
     6713:  587:      return 0;
        -:  588:    case estate:
     6523:  589:      return 2;
        -:  590:    case duchy:
     3875:  591:      return 5;
        -:  592:    case province:
     3565:  593:      return 8;
        -:  594:    case copper:
     6672:  595:      return 0;
        -:  596:    case silver:
     6234:  597:      return 3;
        -:  598:    case gold:
     3729:  599:      return 6;
        -:  600:    case adventurer:
     3650:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
     5136:  607:      return 4;
        -:  608:    case mine:
     3793:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
     5141:  613:      return 4;
        -:  614:    case village:
     6369:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
     3992:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
     3715:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
     5127:  629:      return 4;
        -:  630:    case embargo: 
     6478:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
     4982:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
        1:  642:  return -1;
        -:  643:}
        -:  644:
function cardEffect called 100600 returned 100% blocks executed 51%
   100600:  645:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:{
        -:  647:  int i;
        -:  648:  int j;
        -:  649:  int k;
        -:  650:  int x;
        -:  651:  int index;
   100600:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 100600
   100600:  653:  int nextPlayer = currentPlayer + 1;
   100600:  654:  int tributeRevealedCards[2] = {-1, -1};
        -:  655:  int temphand[MAX_HAND];// moved above the if statement
   100600:  656:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 60432 (fallthrough)
branch  1 taken 40168
    60432:  657:    nextPlayer = 0;
        -:  658:  }
        -:  659:  
        -:  660:	
        -:  661:  //uses switch to select card and perform actions
   100600:  662:  switch( card ) 
branch  0 taken 50038
branch  1 taken 16
branch  2 taken 50012
branch  3 taken 20
branch  4 taken 12
branch  5 taken 10
branch  6 taken 30
branch  7 taken 14
branch  8 taken 32
branch  9 taken 26
branch 10 taken 32
branch 11 taken 16
branch 12 taken 22
branch 13 taken 20
branch 14 taken 28
branch 15 taken 28
branch 16 taken 24
branch 17 taken 24
branch 18 taken 20
branch 19 taken 176
        -:  663:    {
        -:  664:    case adventurer:
    50038:  665:      return adventurerFunction(state);
call    0 returned 50038
        -:  666:			
        -:  667:    case council_room:
       16:  668:      return council_roomFunction(handPos, state);
call    0 returned 16
        -:  669:    
        -:  670:    case smithy:
    50012:  671:      return smithyFunction(handPos, state);
call    0 returned 50012
        -:  672:		
        -:  673:		case great_hall:
       20:  674:		  return great_hallFunction(handPos, state);
call    0 returned 20
        -:  675:		
        -:  676:		case outpost:
       12:  677:		  return outpostFunction(handPos, state);
call    0 returned 12
        -:  678:		  
        -:  679:    case feast:
        -:  680:      //gain card with cost up to 5
        -:  681:      //Backup hand
      335:  682:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 325
branch  1 taken 10 (fallthrough)
      325:  683:	temphand[i] = state->hand[currentPlayer][i];//Backup card
      325:  684:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  685:      }
        -:  686:      //Backup hand
        -:  687:
        -:  688:      //Update Coins for Buy
       10:  689:      updateCoins(currentPlayer, state, 5);
call    0 returned 10
       10:  690:      x = 1;//Condition to loop on
       30:  691:      while( x == 1) {//Buy one card
branch  0 taken 10
branch  1 taken 10 (fallthrough)
       10:  692:	if (supplyCount(choice1, state) <= 0){
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0
        -:  693:	  if (DEBUG)
        -:  694:	    printf("None of that card left, sorry!\n");
        -:  695:
        -:  696:	  if (DEBUG){
        -:  697:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  698:	  }
        -:  699:	}
       10:  700:	else if (state->coins < getCost(choice1)){
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
    #####:  701:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  702:
        -:  703:	  if (DEBUG){
        -:  704:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  705:	  }
        -:  706:	}
        -:  707:	else{
        -:  708:
        -:  709:	  if (DEBUG){
        -:  710:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  711:	  }
        -:  712:
       10:  713:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 10
       10:  714:	  x = 0;//No more buying cards
        -:  715:
        -:  716:	  if (DEBUG){
        -:  717:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  718:	  }
        -:  719:
        -:  720:	}
        -:  721:      }     
        -:  722:
        -:  723:      //Reset Hand
      335:  724:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 325
branch  1 taken 10 (fallthrough)
      325:  725:	state->hand[currentPlayer][i] = temphand[i];
      325:  726:	temphand[i] = -1;
        -:  727:      }
        -:  728:      //Reset Hand
        -:  729:      			
       10:  730:      return 0;
        -:  731:			
        -:  732:    case gardens:
       30:  733:      return -1;
        -:  734:			
        -:  735:    case mine:
       14:  736:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
       14:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 13 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 13
        -:  739:	{
        1:  740:	  return -1;
        -:  741:	}
        -:  742:		
       13:  743:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 13 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 13
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:
       13:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 13
call    1 returned 13
branch  2 taken 13 (fallthrough)
branch  3 taken 0
        -:  749:	{
       13:  750:	  return -1;
        -:  751:	}
        -:  752:
    #####:  753:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  754:
        -:  755:      //discard card from hand
    #####:  756:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  757:
        -:  758:      //discard trashed card
    #####:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  760:	{
    #####:  761:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  762:	    {
    #####:  763:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
    #####:  768:      return 0;
        -:  769:			
        -:  770:    case remodel:
       32:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
       32:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 32
call    1 returned 32
branch  2 taken 32 (fallthrough)
branch  3 taken 0
        -:  774:	{
       32:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:
        -:  793:
    #####:  794:      return 0;
        -:  795:      
        -:  796:		
        -:  797:    case village:
        -:  798:      //+1 Card
       26:  799:      drawCard(currentPlayer, state);
call    0 returned 26
        -:  800:			
        -:  801:      //+2 Actions
       26:  802:      state->numActions = state->numActions + 2;
        -:  803:			
        -:  804:      //discard played card from hand
       26:  805:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 26
       26:  806:      return 0;
        -:  807:		
        -:  808:    case baron:
       32:  809:      state->numBuys++;//Increase buys by 1!
       32:  810:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0 (fallthrough)
branch  1 taken 32
    #####:  811:	int p = 0;//Iterator for hand!
    #####:  812:	int card_not_discarded = 1;//Flag for discard set!
    #####:  813:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  814:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  815:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  816:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  817:	    state->discardCount[currentPlayer]++;
    #####:  818:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  819:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  820:	    }
    #####:  821:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  822:	    state->handCount[currentPlayer]--;
    #####:  823:	    card_not_discarded = 0;//Exit the loop
        -:  824:	  }
    #####:  825:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  826:	    if(DEBUG) {
        -:  827:	      printf("No estate cards in your hand, invalid choice\n");
        -:  828:	      printf("Must gain an estate if there are any\n");
        -:  829:	    }
    #####:  830:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  831:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  832:	      state->supplyCount[estate]--;//Decrement estates
    #####:  833:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  834:		isGameOver(state);
call    0 never executed
        -:  835:	      }
        -:  836:	    }
    #####:  837:	    card_not_discarded = 0;//Exit the loop
        -:  838:	  }
        -:  839:			    
        -:  840:	  else{
    #####:  841:	    p++;//Next card
        -:  842:	  }
        -:  843:	}
        -:  844:      }
        -:  845:			    
        -:  846:      else{
       32:  847:	if (supplyCount(estate, state) > 0){
call    0 returned 32
branch  1 taken 32 (fallthrough)
branch  2 taken 0
       32:  848:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 32
       32:  849:	  state->supplyCount[estate]--;//Decrement Estates
       32:  850:	  if (supplyCount(estate, state) == 0){
call    0 returned 32
branch  1 taken 0 (fallthrough)
branch  2 taken 32
    #####:  851:	    isGameOver(state);
call    0 never executed
        -:  852:	  }
        -:  853:	}
        -:  854:      }
        -:  855:	    
        -:  856:      
       32:  857:      return 0;
        -:  858:		
        -:  859:		
        -:  860:    case minion:
        -:  861:      //+1 action
       16:  862:      state->numActions++;
        -:  863:			
        -:  864:      //discard card from hand
       16:  865:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 16
        -:  866:			
       16:  867:      if (choice1)		//+2 coins
branch  0 taken 0 (fallthrough)
branch  1 taken 16
        -:  868:	{
    #####:  869:	  state->coins = state->coins + 2;
        -:  870:	}
        -:  871:			
       16:  872:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 0 (fallthrough)
branch  1 taken 16
        -:  873:	{
        -:  874:	  //discard hand
    #####:  875:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  876:	    {
    #####:  877:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:	    }
        -:  879:				
        -:  880:	  //draw 4
    #####:  881:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  884:	    }
        -:  885:				
        -:  886:	  //other players discard hand and redraw if hand size > 4
    #####:  887:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	    {
    #####:  889:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  890:		{
    #####:  891:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  892:		    {
        -:  893:		      //discard hand
    #####:  894:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  895:			{
    #####:  896:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  897:			}
        -:  898:							
        -:  899:		      //draw 4
    #####:  900:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  901:			{
    #####:  902:			  drawCard(i, state);
call    0 never executed
        -:  903:			}
        -:  904:		    }
        -:  905:		}
        -:  906:	    }
        -:  907:				
        -:  908:	}
       16:  909:      return 0;
        -:  910:		
        -:  911:    case steward:
       22:  912:      if (choice1 == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 22
        -:  913:	{
        -:  914:	  //+2 cards
    #####:  915:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  916:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  917:	}
       22:  918:      else if (choice1 == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 22
        -:  919:	{
        -:  920:	  //+2 coins
    #####:  921:	  state->coins = state->coins + 2;
        -:  922:	}
        -:  923:      else
        -:  924:	{
        -:  925:	  //trash 2 cards in hand
       22:  926:	  discardCard(choice2, currentPlayer, state, 1);
call    0 returned 22
       22:  927:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 22
        -:  928:	}
        -:  929:			
        -:  930:      //discard card from hand
       22:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 22
       22:  932:      return 0;
        -:  933:		
        -:  934:    case tribute:
       20:  935:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####:  936:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  937:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  938:	  state->deckCount[nextPlayer]--;
        -:  939:	}
    #####:  940:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  942:	  state->discardCount[nextPlayer]--;
        -:  943:	}
        -:  944:	else{
        -:  945:	  //No Card to Reveal
        -:  946:	  if (DEBUG){
        -:  947:	    printf("No cards to reveal\n");
        -:  948:	  }
        -:  949:	}
        -:  950:      }
        -:  951:	    
        -:  952:      else{
       20:  953:	if (state->deckCount[nextPlayer] == 0){
branch  0 taken 0 (fallthrough)
branch  1 taken 20
    #####:  954:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  955:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  956:	    state->deckCount[nextPlayer]++;
    #####:  957:	    state->discard[nextPlayer][i] = -1;
    #####:  958:	    state->discardCount[nextPlayer]--;
        -:  959:	  }
        -:  960:			    
    #####:  961:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  962:	} 
       20:  963:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       20:  964:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       20:  965:	state->deckCount[nextPlayer]--;
       20:  966:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       20:  967:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       20:  968:	state->deckCount[nextPlayer]--;
        -:  969:      }    
        -:  970:		       
       20:  971:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 taken 10 (fallthrough)
branch  1 taken 10
       10:  972:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       10:  973:	state->playedCardCount++;
       10:  974:	tributeRevealedCards[1] = -1;
        -:  975:      }
        -:  976:
       80:  977:      for (i = 0; i <= 2; i ++){
branch  0 taken 60
branch  1 taken 20 (fallthrough)
       60:  978:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 taken 42 (fallthrough)
branch  1 taken 18
branch  2 taken 37 (fallthrough)
branch  3 taken 5
branch  4 taken 3 (fallthrough)
branch  5 taken 34
       26:  979:	  state->coins += 2;
        -:  980:	}
        -:  981:		    
       34:  982:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 taken 30 (fallthrough)
branch  1 taken 4
branch  2 taken 30 (fallthrough)
branch  3 taken 0
branch  4 taken 30 (fallthrough)
branch  5 taken 0
branch  6 taken 30 (fallthrough)
branch  7 taken 0
branch  8 taken 0 (fallthrough)
branch  9 taken 30
        4:  983:	  drawCard(currentPlayer, state);
call    0 returned 4
        4:  984:	  drawCard(currentPlayer, state);
call    0 returned 4
        -:  985:	}
        -:  986:	else{//Action Card
       30:  987:	  state->numActions = state->numActions + 2;
        -:  988:	}
        -:  989:      }
        -:  990:	    
       20:  991:      return 0;
        -:  992:		
        -:  993:    case ambassador:
       28:  994:      j = 0;		//used to check if player has enough cards to discard
        -:  995:
       28:  996:      if (choice2 > 2 || choice2 < 0)
branch  0 taken 28 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 28
        -:  997:	{
    #####:  998:	  return -1;				
        -:  999:	}
        -: 1000:
       28: 1001:      if (choice1 == handPos)
branch  0 taken 28 (fallthrough)
branch  1 taken 0
        -: 1002:	{
       28: 1003:	  return -1;
        -: 1004:	}
        -: 1005:
    #####: 1006:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
    #####: 1008:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1009:	    {
    #####: 1010:	      j++;
        -: 1011:	    }
        -: 1012:	}
    #####: 1013:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1014:	{
    #####: 1015:	  return -1;				
        -: 1016:	}
        -: 1017:
        -: 1018:      if (DEBUG) 
        -: 1019:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1020:
        -: 1021:      //increase supply count for choosen card by amount being discarded
    #####: 1022:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1023:			
        -: 1024:      //each other player gains a copy of revealed card
    #####: 1025:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1026:	{
    #####: 1027:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1028:	    {
    #####: 1029:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1030:	    }
        -: 1031:	}
        -: 1032:
        -: 1033:      //discard played card from hand
    #####: 1034:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1035:
        -: 1036:      //trash copies of cards returned to supply
    #####: 1037:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1038:	{
    #####: 1039:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1040:	    {
    #####: 1041:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1042:		{
    #####: 1043:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1044:		  break;
        -: 1045:		}
        -: 1046:	    }
        -: 1047:	}			
        -: 1048:
    #####: 1049:      return 0;
        -: 1050:		
        -: 1051:    case cutpurse:
        -: 1052:
       28: 1053:      updateCoins(currentPlayer, state, 2);
call    0 returned 28
       84: 1054:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 56
branch  1 taken 28 (fallthrough)
        -: 1055:	{
       56: 1056:	  if (i != currentPlayer)
branch  0 taken 34 (fallthrough)
branch  1 taken 22
        -: 1057:	    {
       44: 1058:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 taken 25
branch  1 taken 19 (fallthrough)
        -: 1059:		{
       25: 1060:		  if (state->hand[i][j] == copper)
branch  0 taken 15 (fallthrough)
branch  1 taken 10
        -: 1061:		    {
       15: 1062:		      discardCard(j, i, state, 0);
call    0 returned 15
       15: 1063:		      break;
        -: 1064:		    }
       10: 1065:		  if (j == state->handCount[i])
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -: 1066:		    {
    #####: 1067:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1068:			{
        -: 1069:			  if (DEBUG)
        -: 1070:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1071:			}	
    #####: 1072:		      break;
        -: 1073:		    }		
        -: 1074:		}
        -: 1075:					
        -: 1076:	    }
        -: 1077:				
        -: 1078:	}				
        -: 1079:
        -: 1080:      //discard played card from hand
       28: 1081:      discardCard(handPos, currentPlayer, state, 0);			
call    0 returned 28
        -: 1082:
       28: 1083:      return 0;
        -: 1084:
        -: 1085:		
        -: 1086:    case embargo: 
        -: 1087:      //+2 Coins
       24: 1088:      state->coins = state->coins + 2;
        -: 1089:			
        -: 1090:      //see if selected pile is in play
       24: 1091:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 24
        -: 1092:	{
    #####: 1093:	  return -1;
        -: 1094:	}
        -: 1095:			
        -: 1096:      //add embargo token to selected supply pile
       24: 1097:      state->embargoTokens[choice1]++;
        -: 1098:			
        -: 1099:      //trash card
       24: 1100:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 24
       24: 1101:      return 0;
        -: 1102:		
        -: 1103:    case sea_hag:
       72: 1104:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 48
branch  1 taken 24 (fallthrough)
       48: 1105:	if (i != currentPlayer){
branch  0 taken 28 (fallthrough)
branch  1 taken 20
       28: 1106:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
       28: 1107:	  state->discardCount[i]++;
       28: 1108:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1109:	}
        -: 1110:      }
       24: 1111:      return 0;
        -: 1112:		
        -: 1113:    case treasure_map:
        -: 1114:      //search hand for another treasure_map
       20: 1115:      index = -1;
      107: 1116:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 87
branch  1 taken 20 (fallthrough)
        -: 1117:	{
       87: 1118:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 taken 0 (fallthrough)
branch  1 taken 87
branch  2 never executed
branch  3 never executed
        -: 1119:	    {
    #####: 1120:	      index = i;
    #####: 1121:	      break;
        -: 1122:	    }
        -: 1123:	}
       20: 1124:      if (index > -1)
branch  0 taken 0 (fallthrough)
branch  1 taken 20
        -: 1125:	{
        -: 1126:	  //trash both treasure cards
    #####: 1127:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1128:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1129:
        -: 1130:	  //gain 4 Gold cards
    #####: 1131:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1132:	    {
    #####: 1133:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1134:	    }
        -: 1135:				
        -: 1136:	  //return success
    #####: 1137:	  return 1;
        -: 1138:	}
        -: 1139:			
        -: 1140:      //no second treasure_map found in hand
       20: 1141:      return -1;
        -: 1142:    }
        -: 1143:	
      176: 1144:  return -1;
        -: 1145:}
        -: 1146:
function discardCard called 50235 returned 100% blocks executed 89%
    50235: 1147:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1148:{
        -: 1149:	
        -: 1150:  //if card is not trashed, added to Played pile 
    50235: 1151:  if (trashFlag < 1)
branch  0 taken 50167 (fallthrough)
branch  1 taken 68
        -: 1152:    {
        -: 1153:      //add card to played pile
    50167: 1154:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    50167: 1155:      state->playedCardCount++;
        -: 1156:    }
        -: 1157:	
        -: 1158:  //set played card to -1
    50235: 1159:  state->hand[currentPlayer][handPos] = -1;
        -: 1160:	
        -: 1161:  //remove card from player's hand
    50235: 1162:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 15 (fallthrough)
branch  1 taken 50220
        -: 1163:    {
        -: 1164:      //reduce number of cards in hand
       15: 1165:      state->handCount[currentPlayer]--;
        -: 1166:    }
    50220: 1167:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 50220
        -: 1168:    {
        -: 1169:      //reduce number of cards in hand
    #####: 1170:      state->handCount[currentPlayer]--;
        -: 1171:    }
        -: 1172:  else 	
        -: 1173:    {
        -: 1174:      //replace discarded card with last card in hand
    50220: 1175:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1176:      //set last card to -1
    50220: 1177:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1178:      //reduce number of cards in hand
    50220: 1179:      state->handCount[currentPlayer]--;
        -: 1180:    }
        -: 1181:	
    50235: 1182:  return 0;
        -: 1183:}
        -: 1184:
function gainCard called 29830 returned 100% blocks executed 70%
    29830: 1185:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1186:{
        -: 1187:  //Note: supplyPos is enum of choosen card
        -: 1188:	
        -: 1189:  //check if supply pile is empty (0) or card is not used in game (-1)
    29830: 1190:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 29830
branch  1 taken 0 (fallthrough)
branch  2 taken 29830
        -: 1191:    {
    #####: 1192:      return -1;
        -: 1193:    }
        -: 1194:	
        -: 1195:  //added card for [whoseTurn] current player:
        -: 1196:  // toFlag = 0 : add to discard
        -: 1197:  // toFlag = 1 : add to deck
        -: 1198:  // toFlag = 2 : add to hand
        -: 1199:
    29830: 1200:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 29830
        -: 1201:    {
    #####: 1202:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1203:      state->deckCount[player]++;
        -: 1204:    }
    29830: 1205:  else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 29830
        -: 1206:    {
    #####: 1207:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1208:      state->handCount[player]++;
        -: 1209:    }
        -: 1210:  else
        -: 1211:    {
    29830: 1212:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    29830: 1213:      state->discardCount[player]++;
        -: 1214:    }
        -: 1215:	
        -: 1216:  //decrease number in supply pile
    29830: 1217:  state->supplyCount[supplyPos]--;
        -: 1218:	 
    29830: 1219:  return 0;
        -: 1220:}
        -: 1221:
function updateCoins called 100188 returned 100% blocks executed 100%
   100188: 1222:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1223:{
        -: 1224:  int i;
        -: 1225:	
        -: 1226:  //reset coin count
   100188: 1227:  state->coins = 0;
        -: 1228:
        -: 1229:  //add coins for each Treasure card in player's hand
   601758: 1230:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 501570
branch  1 taken 100188 (fallthrough)
        -: 1231:    {
   501570: 1232:      if (state->hand[player][i] == copper)
branch  0 taken 332880 (fallthrough)
branch  1 taken 168690
        -: 1233:	{
   332880: 1234:	  state->coins += 1;
        -: 1235:	}
   168690: 1236:      else if (state->hand[player][i] == silver)
branch  0 taken 16548 (fallthrough)
branch  1 taken 152142
        -: 1237:	{
    16548: 1238:	  state->coins += 2;
        -: 1239:	}
   152142: 1240:      else if (state->hand[player][i] == gold)
branch  0 taken 16807 (fallthrough)
branch  1 taken 135335
        -: 1241:	{
    16807: 1242:	  state->coins += 3;
        -: 1243:	}	
        -: 1244:    }	
        -: 1245:
        -: 1246:  //add bonus
   100188: 1247:  state->coins += bonus;
        -: 1248:
   100188: 1249:  return 0;
        -: 1250:}
        -: 1251:
function adventurerFunction called 50038 returned 100% blocks executed 94%
    50038: 1252:int adventurerFunction(struct gameState *state){
    50038: 1253:  int currentPlayer = whoseTurn(state);
call    0 returned 50038
    50038: 1254:  int nextPlayer = currentPlayer + 1;
        -: 1255:  int temphand[MAX_HAND];// moved above the if statement
    50038: 1256:  int drawntreasure=0;
        -: 1257:  int cardDrawn;
    50038: 1258:  int z = 0;// this is the counter for the temp hand
    50038: 1259:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 30065 (fallthrough)
branch  1 taken 19973
    30065: 1260:    nextPlayer = 0;
        -: 1261:  }
   250359: 1262:  while(drawntreasure<2){
branch  0 taken 150283
branch  1 taken 50038 (fallthrough)
   150283: 1263:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0 (fallthrough)
branch  1 taken 150283
    #####: 1264:	  shuffle(currentPlayer, state);
call    0 never executed
        -: 1265:	}
   150283: 1266:	drawCard(currentPlayer, state);
call    0 returned 150283
   150283: 1267:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   150283: 1268:	if (cardDrawn == copper || cardDrawn == silver)
branch  0 taken 100229 (fallthrough)
branch  1 taken 50054
branch  2 taken 50022 (fallthrough)
branch  3 taken 50207
   100076: 1269:	  drawntreasure++;
        -: 1270:	else{
    50207: 1271:	  temphand[z]=cardDrawn;
    50207: 1272:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    50207: 1273:	  z++;
        -: 1274:	}
        -: 1275:      }
   150283: 1276:      while(z-1>=0){
branch  0 taken 50207
branch  1 taken 50038 (fallthrough)
    50207: 1277:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    50207: 1278:	z=z-1;
        -: 1279:      }
    50038: 1280:      return 0;
        -: 1281:}
        -: 1282:
function council_roomFunction called 16 returned 100% blocks executed 100%
       16: 1283:int council_roomFunction(int handPos, struct gameState *state){
        -: 1284:  int i;
       16: 1285:  int currentPlayer = whoseTurn(state);
call    0 returned 16
       16: 1286:  int nextPlayer = currentPlayer + 1;
       16: 1287:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 10 (fallthrough)
branch  1 taken 6
       10: 1288:    nextPlayer = 0;
        -: 1289:  }
        -: 1290:  //+4 Cards
       80: 1291:      for (i = 0; i < 4; i++)
branch  0 taken 64
branch  1 taken 16 (fallthrough)
        -: 1292:	{
       64: 1293:	  drawCard(currentPlayer, state);
call    0 returned 64
        -: 1294:	}
        -: 1295:			
        -: 1296:      //+1 Buy
       16: 1297:      state->numBuys++;
        -: 1298:			
        -: 1299:      //Each other player draws a card
       32: 1300:      for (i = 0; i < state->numPlayers - 1; i++)
branch  0 taken 16
branch  1 taken 16 (fallthrough)
        -: 1301:	{
       16: 1302:	  if ( i != currentPlayer )
branch  0 taken 10 (fallthrough)
branch  1 taken 6
        -: 1303:	    {
       10: 1304:	      drawCard(i, state);
call    0 returned 10
        -: 1305:	    }
        -: 1306:	}
        -: 1307:			
        -: 1308:      //put played card in played card pile
       16: 1309:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 16
        -: 1310:			
       16: 1311:      return 0;
        -: 1312:}
        -: 1313:
function smithyFunction called 50012 returned 100% blocks executed 100%
    50012: 1314:int smithyFunction(int handPos,struct gameState *state){
        -: 1315:  int i;
    50012: 1316:  int currentPlayer = whoseTurn(state);
call    0 returned 50012
    50012: 1317:  int nextPlayer = currentPlayer + 1;
        -: 1318:
    50012: 1319:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 30047 (fallthrough)
branch  1 taken 19965
    30047: 1320:    nextPlayer = 0;
        -: 1321:  }
        -: 1322:  //+3 Cards
   150036: 1323:      for (i = 0; i < 2; i++)
branch  0 taken 100024
branch  1 taken 50012 (fallthrough)
        -: 1324:	{
   100024: 1325:	  drawCard(currentPlayer, state);
call    0 returned 100024
        -: 1326:	}
        -: 1327:			
        -: 1328:      //discard card from hand
    50012: 1329:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 50012
    50012: 1330:      return 0;
        -: 1331:		
        -: 1332:}
        -: 1333:
function great_hallFunction called 20 returned 100% blocks executed 100%
       20: 1334:int great_hallFunction(int handPos, struct gameState *state){
       20: 1335:  int currentPlayer = whoseTurn(state);
call    0 returned 20
       20: 1336:  int nextPlayer = currentPlayer + 1;
       20: 1337:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 14 (fallthrough)
branch  1 taken 6
       14: 1338:    nextPlayer = 0;
        -: 1339:  }
        -: 1340:  //+1 Card
       20: 1341:      drawCard(currentPlayer, state);
call    0 returned 20
        -: 1342:			
        -: 1343:      //+1 Actions
       20: 1344:      state->numActions++;
        -: 1345:      //+1 Buy (bug)
       20: 1346:      state->numBuys++;
        -: 1347:      
        -: 1348:			
        -: 1349:      //discard card from hand
       20: 1350:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 20
       20: 1351:      return 0;
        -: 1352:}
        -: 1353:
function outpostFunction called 12 returned 100% blocks executed 100%
       12: 1354:int outpostFunction(int handPos, struct gameState *state){
       12: 1355:  int currentPlayer = whoseTurn(state);
call    0 returned 12
       12: 1356:  int nextPlayer = currentPlayer + 1;
       12: 1357:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 8 (fallthrough)
branch  1 taken 4
        8: 1358:    nextPlayer = 0;
        -: 1359:  }
        -: 1360:  //set outpost flag
       12: 1361:      state->outpostPlayed++;
        -: 1362:			
        -: 1363:      //discard card
       12: 1364:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 12
       12: 1365:      return 0;
        -: 1366:}
        -: 1367://end of dominion.c
        -: 1368:
